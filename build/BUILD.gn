import("//build/config/chrome_build.gni")
import("//build/config/compiler/compiler.gni")
import("//build/util/branding.gni")
import("//chrome/version.gni")

config("electron_config") {
  include_dirs = [
    "//electron",
    "//skia/config",
    "//third_party/skia/include/core",
    "$root_gen_dir/electron",
    "//electron/vendor/brightray",
    "//electron/vendor/native_mate",
    "//electron/vendor/node/src",
    "//electron/vendor/node/deps/http_parser",
    "//electron/vendor/node/deps/uv/include",
    # The `node.h` is using `#include"ares.h"`.
    "//electron/vendor/node/deps/cares/include",
    "//electron/vendor",
  ]

  defines = [
    "ATOM_PRODUCT_NAME=\"$chrome_product_short_name\"",
    "NODE_WANT_INTERNALS=1",
    "NODE_SHARED_MODE",
    "V8_SHARED",
    "USING_V8_SHARED",
    # "USING_V8_SHARED",
    # "V8_SHARED",
    # "BUILDING_V8_SHARED",
    # "BORINGSSL_SHARED_LIBRARY",
  ]

  cflags = []

  if (is_clang) {
    cflags += [
      "-Wno-error",
      "-Wno-unknown-warning-option",
      "-Wno-parentheses-equality",
      "-Wno-unused-function",
      "-Wno-sometimes-uninitialized",
      "-Wno-pointer-sign",
      "-Wno-sign-compare",
      "-Wno-string-plus-int",
      "-Wno-unused-variable",
      "-Wno-deprecated-declarations",
      "-Wno-return-type",
      "-Wno-gnu-folding-constant",
      "-Wno-shift-negative-value",
      "-Wno-varargs", # https://git.io/v6Olj
      "-Wno-deprecated-declarations",
      "-Wno-deprecated-register",
      "-Wno-unused-private-field",
      "-Wno-unused-function",
      "-Wno-unguarded-availability",
      "-Wno-overloaded-virtual",
    ]
  }

  if (is_win) {
    cflags += [
      "/wd4100", # unreferenced formal parameter
      "/wd4121", # alignment of a member was sensitive to packing
      "/wd4127", # conditional expression is constant
      "/wd4189", # local variable is initialized but not referenced
      "/wd4244", # 'initializing' : conversion from 'double' to 'size_t', possible loss of data
      "/wd4245", # 'initializing' : conversion from 'int' to 'const net::QuicVersionTag', signed/unsigned mismatch
      "/wd4251", # class 'std::xx' needs to have dll-interface.
      "/wd4310", # cast truncates constant value
      "/wd4355", # 'this' : used in base member initializer list
      "/wd4480", # nonstandard extension used: specifying underlying type for enum
      "/wd4481", # nonstandard extension used: override specifier 'override'
      "/wd4510", # default constructor could not be generated
      "/wd4512", # assignment operator could not be generated
      "/wd4610", # user defined constructor required
      "/wd4702", # unreachable code
      "/wd4819", # The file contains a character that cannot be represented in the current code page
      "/wd4267", # conversion from 'size_t' to 'int', possible loss of data
      "/wd4065", # switch statement contains 'default' but no 'case' labels
    ]
  }

  common_flags = []
  if (is_mac) {
    common_flags += [ "-mmacosx-version-min=10.9" ]
  }
  ldflags = common_flags
  cflags_objcc = common_flags
}
