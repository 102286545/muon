diff --git a/BUILD.gn b/BUILD.gn
index 8587356ddcca34cdcad716ba7395666ec7ce4380..0b678f7dc2dfe58641c7e4a1019b195c712553ca 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -101,8 +101,10 @@ if (v8_enable_disassembler == "") {
 # snapshots.
 is_target_simulator = target_cpu != v8_target_cpu
 
+if (!muon_build) {
 v8_generated_peephole_source = "$target_gen_dir/bytecode-peephole-table.cc"
 v8_random_seed = "314159265"
+}
 v8_toolset_for_shell = "host"
 
 ###############################################################################
@@ -113,6 +115,13 @@ config("internal_config") {
 
   include_dirs = [ "." ]
 
+  if (muon_build) {
+    defines = [
+      "SUPPRESS_V8_SNAPSHOT",
+      "BUILDING_V8_SHARED",
+    ]
+  }
+
   if (is_component_build) {
     defines = [ "BUILDING_V8_SHARED" ]
   }
@@ -151,6 +160,9 @@ config("libsampler_config") {
 # This config should only be applied to code using V8 and not any V8 code
 # itself.
 config("external_config") {
+  if (muon_build) {
+    defines = [ "USING_V8_SHARED" ]
+  }
   if (is_component_build) {
     defines = [ "USING_V8_SHARED" ]
   }
@@ -386,6 +398,31 @@ config("toolchain") {
   }
 }
 
+if (muon_build) {
+  group("v8") {
+    public_deps = [ "//electron/build/node:build_node" ]
+    public_configs = [ ":external_config" ]
+    if (v8_enable_inspector_override) {
+      deps = [ "src/inspector:inspector" ]
+    }
+  }
+  group("v8_snapshot") {
+    public_deps = [ "//electron/build/node:build_node" ]
+  }
+  group("v8_libplatform") {
+    public_deps = [ "//electron/build/node:build_node" ]
+    public_configs = [ ":libplatform_config" ]
+  }
+  group("d8") {}
+  group("postmortem-metadata") {}
+  group("gn_all") {}
+  group("wasm_asmjs_fuzzer") {}
+  group("parser_fuzzer") {}
+  group("json_fuzzer") {}
+  group("regexp_fuzzer") {}
+  group("wasm_fuzzer") {}
+  group("v8_libbase") {}
+} else {
 ###############################################################################
 # Actions
 #
@@ -2465,13 +2502,14 @@ v8_executable("mkpeephole") {
 ###############################################################################
 # Public targets
 #
-
+}
 want_v8_shell =
     (current_toolchain == host_toolchain && v8_toolset_for_shell == "host") ||
     (current_toolchain == v8_snapshot_toolchain &&
      v8_toolset_for_shell == "host") ||
     (current_toolchain != host_toolchain && v8_toolset_for_shell == "target")
 
+if (!muon_build) {
 group("gn_all") {
   testonly = true
 
@@ -2653,6 +2691,7 @@ v8_executable("v8_parser_shell") {
     deps += [ "//third_party/icu" ]
   }
 }
+}
 
 if (want_v8_shell) {
   v8_executable("v8_shell") {
@@ -2681,6 +2720,7 @@ if (want_v8_shell) {
   }
 }
 
+if (!muon_build) {
 template("v8_fuzzer") {
   name = target_name
   forward_variables_from(invoker, "*")
@@ -3001,3 +3041,4 @@ v8_source_set("wasm_data_section_fuzzer") {
 
 v8_fuzzer("wasm_data_section_fuzzer") {
 }
+}
diff --git a/src/inspector/BUILD.gn b/src/inspector/BUILD.gn
index 6ebb91ccbc773fd526337a8e851bb4b4b984781b..7cbfef74105bd64f674cf3c5aa02cfb2aa39db6d 100644
--- a/src/inspector/BUILD.gn
+++ b/src/inspector/BUILD.gn
@@ -106,7 +106,7 @@ config("inspector_config") {
       "/wd4996",  # Deprecated function call.
     ]
   }
-  if (is_component_build) {
+  if (is_component_build || muon_build) {
     defines = [ "BUILDING_V8_SHARED" ]
   }
 }
diff --git a/src/snapshot/mksnapshot.cc b/src/snapshot/mksnapshot.cc
index f4362e5077e1231e2e57ccaf06ccc9769ebaae61..e048e26d768e358a9097f35afe60585de2cde50d 100644
--- a/src/snapshot/mksnapshot.cc
+++ b/src/snapshot/mksnapshot.cc
@@ -5,7 +5,7 @@
 #include <errno.h>
 #include <signal.h>
 #include <stdio.h>
-
+#ifndef SUPPRESS_V8_SNAPSHOT
 #include "include/libplatform/libplatform.h"
 #include "src/assembler.h"
 #include "src/base/platform/platform.h"
@@ -16,7 +16,6 @@
 #include "src/snapshot/startup-serializer.h"
 
 using namespace v8;
-
 class SnapshotWriter {
  public:
   SnapshotWriter() : fp_(NULL), startup_blob_file_(NULL) {}
@@ -133,9 +132,10 @@ char* GetExtraCode(char* filename, const char* description) {
   fclose(file);
   return chars;
 }
-
+#endif
 
 int main(int argc, char** argv) {
+#ifndef SUPPRESS_V8_SNAPSHOT
   // Make mksnapshot runs predictable to create reproducible snapshots.
   i::FLAG_predictable = true;
 
@@ -180,5 +180,6 @@ int main(int argc, char** argv) {
   V8::Dispose();
   V8::ShutdownPlatform();
   delete platform;
+#endif
   return 0;
 }
