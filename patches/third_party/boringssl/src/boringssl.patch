diff --git a/crypto/cipher/cipher.c b/crypto/cipher/cipher.c
index ae045aefcaef23ab8417edd93399b2431369097f..d225d2928b4ac9d01b0d735792a1a1bb8ac0e38c 100644
--- a/crypto/cipher/cipher.c
+++ b/crypto/cipher/cipher.c
@@ -83,6 +83,8 @@ const EVP_CIPHER *EVP_get_cipherbynid(int nid) {
       return EVP_aes_192_cbc();
     case NID_aes_256_cbc:
       return EVP_aes_256_cbc();
+    case  NID_aes_256_gcm:
+      return EVP_aes_256_gcm();
     default:
       return NULL;
   }
@@ -647,6 +649,8 @@ const EVP_CIPHER *EVP_get_cipherbyname(const char *name) {
     return EVP_aes_128_ecb();
   } else if (OPENSSL_strcasecmp(name, "aes-256-ecb") == 0) {
     return EVP_aes_256_ecb();
+  } else if (OPENSSL_strcasecmp(name, "aes-256-gcm") == 0) {
+    return EVP_aes_256_gcm();
   }
 
   return NULL;
diff --git a/decrepit/evp/evp_do_all.c b/decrepit/evp/evp_do_all.c
index 621c0b11701ffb0a61c5a8ae7585f96289b20438..0533a3b0d7781bee481f87115aa3f9bc5ac7188d 100644
--- a/decrepit/evp/evp_do_all.c
+++ b/decrepit/evp/evp_do_all.c
@@ -26,6 +26,7 @@ void EVP_CIPHER_do_all_sorted(void (*callback)(const EVP_CIPHER *cipher,
   callback(EVP_aes_256_cbc(), "AES-256-CBC", NULL, arg);
   callback(EVP_aes_256_ctr(), "AES-256-CTR", NULL, arg);
   callback(EVP_aes_256_ecb(), "AES-256-ECB", NULL, arg);
+  callback(EVP_aes_256_gcm(), "AES-256-GCM", NULL, arg);
   callback(EVP_aes_256_ofb(), "AES-256-OFB", NULL, arg);
   callback(EVP_aes_256_xts(), "AES-256-XTS", NULL, arg);
   callback(EVP_des_cbc(), "DES-CBC", NULL, arg);
@@ -44,6 +45,7 @@ void EVP_CIPHER_do_all_sorted(void (*callback)(const EVP_CIPHER *cipher,
   callback(EVP_aes_256_cbc(), "aes-256-cbc", NULL, arg);
   callback(EVP_aes_256_ctr(), "aes-256-ctr", NULL, arg);
   callback(EVP_aes_256_ecb(), "aes-256-ecb", NULL, arg);
+  callback(EVP_aes_256_gcm(), "aes-256-gcm", NULL, arg);
   callback(EVP_aes_256_ofb(), "aes-256-ofb", NULL, arg);
   callback(EVP_aes_256_xts(), "aes-256-xts", NULL, arg);
   callback(EVP_des_cbc(), "des-cbc", NULL, arg);
diff --git a/util/BUILD.toplevel b/util/BUILD.toplevel
index 6b645e61a6dd1c9f0932c35ad0ad0939b212e8a7..ddd5212281be01edb6822b420b257ba2c7d31d6c 100644
--- a/util/BUILD.toplevel
+++ b/util/BUILD.toplevel
@@ -28,6 +28,7 @@ load(
     "ssl_sources",
     "tool_sources",
     "tool_headers",
+    "decrepit_sources",
 )
 
 config_setting(
@@ -111,6 +112,15 @@ cc_library(
     deps = [":crypto"],
 )
 
+cc_library(
+    name = "decrepit",
+    srcs = decrepit_sources,
+    copts = boringssl_copts_c11,
+    includes = ["src/include"],
+    visibility = ["//visibility:public"],
+    deps = [":crypto"],
+)
+
 cc_binary(
     name = "bssl",
     srcs = tool_sources + tool_headers,
diff --git a/util/generate_build_files.py b/util/generate_build_files.py
index aae158d13b30b2d169a040ce8140da3c1dbf6da5..0e497baee67d96f695fe417a3b573e96a1965f80 100644
--- a/util/generate_build_files.py
+++ b/util/generate_build_files.py
@@ -154,6 +154,14 @@ class Android(object):
       blueprint.write('    ],\n')
       blueprint.write('}\n')
 
+      blueprint.write('cc_defaults {\n')
+      blueprint.write('    name: "libdecrepit_sources",\n')
+      blueprint.write('    srcs: [\n')
+      for f in sorted(files['decrepit']):
+        blueprint.write('        "%s",\n' % f)
+      blueprint.write('    ],\n')
+      blueprint.write('}\n\n')
+
     # Legacy Android.mk format, only used by Trusty in new branches
     with open('sources.mk', 'w+') as makefile:
       makefile.write(self.header)
@@ -201,6 +209,7 @@ class Bazel(object):
       self.PrintVariableSection(out, 'crypto_sources', files['crypto'])
       self.PrintVariableSection(out, 'tool_sources', files['tool'])
       self.PrintVariableSection(out, 'tool_headers', files['tool_headers'])
+      self.PrintVariableSection(out, 'decrepit_sources', files['decrepit'])
 
       for ((osname, arch), asm_files) in asm_outputs:
         self.PrintVariableSection(
@@ -317,6 +326,8 @@ class GN(object):
       self.PrintVariableSection(out, 'ssl_sources',
                                 files['ssl'] + files['ssl_headers'] +
                                 files['ssl_internal_headers'])
+      self.PrintVariableSection(out, 'decrepit_sources',
+                                files['decrepit'])
 
       for ((osname, arch), asm_files) in asm_outputs:
         self.PrintVariableSection(
@@ -616,6 +627,21 @@ def main(platforms):
   ssl_c_files = FindCFiles(os.path.join('src', 'ssl'), NoTests)
   tool_c_files = FindCFiles(os.path.join('src', 'tool'), NoTests)
   tool_h_files = FindHeaderFiles(os.path.join('src', 'tool'), AllFiles)
+  decrepit_c_files = (
+      FindCFiles(os.path.join('src', 'decrepit', 'bio'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'bio_ssl'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'blowfish'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'cast'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'des'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'dh'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'dsa'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'evp'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'rc4'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'ripemd'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'rsa'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'ssl'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'x509'), NoTests) +
+      FindCFiles(os.path.join('src', 'decrepit', 'xts'), NoTests))
 
   # Generate err_data.c
   with open('err_data.c', 'w+') as err_data:
@@ -680,6 +706,7 @@ def main(platforms):
       'ssl_internal_headers': ssl_internal_h_files,
       'tool': tool_c_files,
       'tool_headers': tool_h_files,
+      'decrepit': decrepit_c_files,
       'test': test_c_files,
       'test_support': test_support_c_files,
       'test_support_headers': test_support_h_files,
