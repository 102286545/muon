diff --git a/base/BUILD.gn b/base/BUILD.gn
index 3754be5f383f24423d78018b7baef9637d0ce85e..c5fce734bb847ac6faaebf0a561c8e00c816f7ec 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -1524,7 +1524,14 @@ static_library("base_static") {
   }
 }
 
-component("i18n") {
+group("i18n") {
+  public_deps = [
+    ":i18n_without_icu",
+    "//third_party/icu",
+  ]
+}
+
+component("i18n_without_icu") {
   output_name = "base_i18n"
   sources = [
     "i18n/base_i18n_export.h",
@@ -1571,8 +1578,8 @@ component("i18n") {
   configs += [ "//build/config/compiler:wexit_time_destructors" ]
   public_deps = [
     "//third_party/ced",
-    "//third_party/icu",
   ]
+  configs += [ "//third_party/icu:icu_config" ]
   deps = [
     ":base",
     "//base/third_party/dynamic_annotations",
diff --git a/build/config/chrome_build.gni b/build/config/chrome_build.gni
index c649018a7a0aeb20caeb2bf37c60d57c48630f1b..be9927c27392af9c260dc4bbc4145e9a803b08ee 100644
--- a/build/config/chrome_build.gni
+++ b/build/config/chrome_build.gni
@@ -2,6 +2,8 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//electron/build/muon.gni")
+
 declare_args() {
   # Select the desired branding flavor. False means normal Chromium branding,
   # true means official Google Chrome branding (requires extra Google-internal
@@ -11,12 +13,12 @@ declare_args() {
   # Break chrome.dll into multple pieces based on process type. Only available
   # on Windows.
   is_multi_dll_chrome = is_win && !is_component_build
-}
 
-# Refers to the subdirectory for branding in various places including
-# chrome/app/theme.
-if (is_chrome_branded) {
-  branding_path_component = "google_chrome"
-} else {
-  branding_path_component = "chromium"
+  # Refers to the subdirectory for branding in various places including
+  # chrome/app/theme.
+  if (is_chrome_branded) {
+    branding_path_component = "google_chrome"
+  } else {
+    branding_path_component = "chromium"
+  }
 }
diff --git a/build/toolchain/mac/BUILD.gn b/build/toolchain/mac/BUILD.gn
index 2bb96c75cbeb333f20ab89a7243874fedc99099c..2eccbefa34bff6a88e2b4a458d62da89e6b05c0e 100644
--- a/build/toolchain/mac/BUILD.gn
+++ b/build/toolchain/mac/BUILD.gn
@@ -216,13 +216,15 @@ template("mac_toolchain") {
     }
 
     tool("alink") {
+      rspfile = "{{output}}.rsp"
       script =
           rebase_path("//build/toolchain/mac/filter_libtool.py", root_build_dir)
-      command = "$env_wrapper rm -f {{output}} && TOOL_VERSION=${tool_versions.filter_libtool} python $script libtool -static {{arflags}} -o {{output}} {{inputs}}"
+      command = "$env_wrapper rm -f {{output}} && TOOL_VERSION=${tool_versions.filter_libtool} python $script libtool -static {{arflags}} -o {{output}} -filelist \"$rspfile\""
       description = "LIBTOOL-STATIC {{output}}"
       outputs = [
         "{{output_dir}}/{{target_output_name}}{{output_extension}}",
       ]
+      rspfile_content = "{{inputs_newline}}"
       default_output_dir = "{{target_out_dir}}"
       default_output_extension = ".a"
       output_prefix = "lib"
diff --git a/build/toolchain/win/BUILD.gn b/build/toolchain/win/BUILD.gn
index ccc0a9435f6fd2ab5da717e0b13066cdab60cd21..f5ae6c0893ae841340953f2ead0c95a2a05ff5d3 100644
--- a/build/toolchain/win/BUILD.gn
+++ b/build/toolchain/win/BUILD.gn
@@ -6,6 +6,7 @@ import("//build/config/clang/clang.gni")
 import("//build/config/compiler/compiler.gni")
 import("//build/config/sanitizers/sanitizers.gni")
 import("//build/config/win/visual_studio_version.gni")
+import("//build/toolchain/cc_wrapper.gni")
 import("//build/toolchain/goma.gni")
 import("//build/toolchain/toolchain.gni")
 
@@ -23,6 +24,8 @@ tool_wrapper_path = rebase_path("tool_wrapper.py", root_build_dir)
 
 if (use_goma) {
   goma_prefix = "$goma_dir/gomacc.exe "
+} else if (cc_wrapper != "") {
+  goma_prefix = "$cc_wrapper "
 } else {
   goma_prefix = ""
 }
diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index 24e39797b9732dd435f71bf21ead3e80c2c98a50..cef3fc7e07f95b7e7260aed46149e79ee8e9aba3 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -34,6 +34,8 @@ if (is_android) {
   import("//build_overrides/v8.gni")
   import("//media/cdm/ppapi/cdm_paths.gni")
   import("//third_party/icu/config.gni")
+  chrome_product_full_name = "Google Chrome"
+  chrome_product_short_name = "Google Chrome"
 }
 
 if (enable_resource_whitelist_generation) {
diff --git a/chrome/browser/chrome_content_browser_manifest_overlay.json b/chrome/browser/chrome_content_browser_manifest_overlay.json
index f1004cbf6dec0f4bdc293ccc272cbbe82b1b3936..7a9f23b38a367ace69f488321e5ce5686b8b0af8 100644
--- a/chrome/browser/chrome_content_browser_manifest_overlay.json
+++ b/chrome/browser/chrome_content_browser_manifest_overlay.json
@@ -9,7 +9,7 @@
           "autofill::mojom::PasswordManagerDriver",
           "extensions::StashService",
           "metrics::mojom::LeakDetector",
-          "rappor::mojom::RapporRecorder",
+          // "rappor::mojom::RapporRecorder",
           "startup_metric_utils::mojom::StartupMetricHost",
           "translate::mojom::ContentTranslateDriver"
         ],
diff --git a/chrome/browser/extensions/api/messaging/message_service.cc b/chrome/browser/extensions/api/messaging/message_service.cc
index 5b4c3829bff7839f33c2214405d12a301177a635..c8ff4e8d3fc4cbc7d6fc28860a4dc8add6e97180 100644
--- a/chrome/browser/extensions/api/messaging/message_service.cc
+++ b/chrome/browser/extensions/api/messaging/message_service.cc
@@ -8,6 +8,7 @@
 #include <limits>
 #include <utility>
 
+#include "atom/browser/extensions/tab_helper.h"
 #include "base/atomic_sequence_num.h"
 #include "base/bind.h"
 #include "base/callback.h"
@@ -18,7 +19,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "build/build_config.h"
 #include "chrome/browser/extensions/api/messaging/extension_message_port.h"
-#include "chrome/browser/extensions/api/messaging/incognito_connectability.h"
 #include "chrome/browser/extensions/api/messaging/native_message_port.h"
 #include "chrome/browser/extensions/api/tabs/tabs_constants.h"
 #include "chrome/browser/extensions/extension_service.h"
@@ -186,6 +186,11 @@ static base::StaticAtomicSequenceNumber g_next_channel_id;
 static content::RenderProcessHost* GetExtensionProcess(
     BrowserContext* context,
     const std::string& extension_id) {
+  auto original = ExtensionsBrowserClient::Get()->GetOriginalContext(context);
+  // Always use the original context for non-private child contexts
+  if (!context->IsOffTheRecord()) {
+    context = original;
+  }
   scoped_refptr<SiteInstance> site_instance =
       ProcessManager::Get(context)->GetSiteInstanceForURL(
           Extension::GetBaseURLFromExtensionId(extension_id));
@@ -330,9 +335,7 @@ void MessageService::OpenChannelToExtension(
     // Only the tab id is useful to platform apps for internal use. The
     // unnecessary bits will be stripped out in
     // MessagingBindings::DispatchOnConnect().
-    source_tab.reset(ExtensionTabUtil::CreateTabObject(source_contents)
-                         ->ToValue()
-                         .release());
+    source_tab.reset(extensions::TabHelper::CreateTabValue(source_contents));
 
     content::RenderFrameHost* rfh =
         content::RenderFrameHost::FromID(source_process_id, source_routing_id);
@@ -392,10 +395,10 @@ void MessageService::OpenChannelToExtension(
     }
 
     // This check may show a dialog.
-    IncognitoConnectability::Get(context)
-        ->Query(target_extension, source_contents, source_url,
-                base::Bind(&MessageService::OnOpenChannelAllowed,
-                           weak_factory_.GetWeakPtr(), base::Passed(&params)));
+    // IncognitoConnectability::Get(context)
+    //     ->Query(target_extension, source_contents, source_url,
+    //             base::Bind(&MessageService::OnOpenChannelAllowed,
+    //                        weak_factory_.GetWeakPtr(), base::Passed(&params)));
     return;
   }
 
diff --git a/chrome/browser/plugins/chrome_plugin_service_filter.cc b/chrome/browser/plugins/chrome_plugin_service_filter.cc
index cdb0cc8cad7a5d866b283bd1043f195d0bf236cc..be9a75689131d2c2af8b11648dfc0b5832d1e24d 100644
--- a/chrome/browser/plugins/chrome_plugin_service_filter.cc
+++ b/chrome/browser/plugins/chrome_plugin_service_filter.cc
@@ -11,7 +11,7 @@
 #include "base/strings/utf_string_conversions.h"
 #include "chrome/browser/chrome_notification_types.h"
 #include "chrome/browser/content_settings/host_content_settings_map_factory.h"
-#include "chrome/browser/engagement/site_engagement_service.h"
+// #include "chrome/browser/engagement/site_engagement_service.h"
 #include "chrome/browser/plugins/flash_temporary_permission_tracker.h"
 #include "chrome/browser/plugins/plugin_finder.h"
 #include "chrome/browser/plugins/plugin_metadata.h"
@@ -226,20 +226,20 @@ bool ChromePluginServiceFilter::IsPluginAvailable(
         settings_map, main_frame_origin, plugin_content_url, &is_managed);
     flash_setting = PluginsFieldTrial::EffectiveContentSetting(
         settings_map, CONTENT_SETTINGS_TYPE_PLUGINS, flash_setting);
-    double engagement = SiteEngagementService::GetScoreFromSettings(
-        settings_map, main_frame_origin.GetURL());
+    // double engagement = SiteEngagementService::GetScoreFromSettings(
+    //     settings_map, main_frame_origin.GetURL());
 
     if (flash_setting == CONTENT_SETTING_ALLOW) {
-      UMA_HISTOGRAM_COUNTS_100(kEngagementSettingAllowedHistogram, engagement);
+      // UMA_HISTOGRAM_COUNTS_100(kEngagementSettingAllowedHistogram, engagement);
       return true;
     }
 
     if (flash_setting == CONTENT_SETTING_BLOCK) {
-      UMA_HISTOGRAM_COUNTS_100(kEngagementSettingBlockedHistogram, engagement);
+      // UMA_HISTOGRAM_COUNTS_100(kEngagementSettingBlockedHistogram, engagement);
       return false;
     }
 
-    UMA_HISTOGRAM_COUNTS_100(kEngagementNoSettingHistogram, engagement);
+    // UMA_HISTOGRAM_COUNTS_100(kEngagementNoSettingHistogram, engagement);
 
     // If the content setting is being managed by enterprise policy and is an
     // ASK setting, we check to see if it has been temporarily granted.
@@ -252,8 +252,8 @@ bool ChromePluginServiceFilter::IsPluginAvailable(
     // check whether the site meets the engagement cutoff for making Flash
     // available without a prompt.This should only happen if the setting isn't
     // being enforced by an enterprise policy.
-    if (engagement < PluginsFieldTrial::GetSiteEngagementThresholdForFlash())
-      return false;
+    // if (engagement < PluginsFieldTrial::GetSiteEngagementThresholdForFlash())
+    //   return false;
   }
 
   return true;
diff --git a/chrome/browser/printing/print_view_manager_base.cc b/chrome/browser/printing/print_view_manager_base.cc
index 33ada8ce7b315e2bd327883bc682e5527ff0696e..224d459d2eabe16f3073cc1ae6eee42a1b516197 100644
--- a/chrome/browser/printing/print_view_manager_base.cc
+++ b/chrome/browser/printing/print_view_manager_base.cc
@@ -58,13 +58,13 @@ namespace {
 
 void ShowWarningMessageBox(const base::string16& message) {
   // Runs always on the UI thread.
-  static bool is_dialog_shown = false;
-  if (is_dialog_shown)
-    return;
-  // Block opening dialog from nested task.
-  base::AutoReset<bool> auto_reset(&is_dialog_shown, true);
+  // static bool is_dialog_shown = false;
+  // if (is_dialog_shown)
+  //   return;
+  // // Block opening dialog from nested task.
+  // base::AutoReset<bool> auto_reset(&is_dialog_shown, true);
 
-  chrome::ShowWarningMessageBox(nullptr, base::string16(), message);
+  // chrome::ShowWarningMessageBox(nullptr, base::string16(), message);
 }
 
 }  // namespace
diff --git a/chrome/browser/renderer_host/chrome_extension_message_filter.cc b/chrome/browser/renderer_host/chrome_extension_message_filter.cc
index 3b1ef45bc0bb4594811b9f068d4d4814e19db217..1c3755e6f0fb9dad2b9a8c11ef11d417175d0c33 100644
--- a/chrome/browser/renderer_host/chrome_extension_message_filter.cc
+++ b/chrome/browser/renderer_host/chrome_extension_message_filter.cc
@@ -14,10 +14,10 @@
 #include "base/strings/utf_string_conversions.h"
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/chrome_notification_types.h"
-#include "chrome/browser/extensions/activity_log/activity_action_constants.h"
-#include "chrome/browser/extensions/activity_log/activity_actions.h"
-#include "chrome/browser/extensions/activity_log/activity_log.h"
-#include "chrome/browser/extensions/api/activity_log_private/activity_log_private_api.h"
+// #include "chrome/browser/extensions/activity_log/activity_action_constants.h"
+// #include "chrome/browser/extensions/activity_log/activity_actions.h"
+// #include "chrome/browser/extensions/activity_log/activity_log.h"
+// #include "chrome/browser/extensions/api/activity_log_private/activity_log_private_api.h"
 #include "chrome/browser/extensions/api/messaging/message_service.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/profiles/profile_manager.h"
@@ -25,6 +25,7 @@
 #include "content/public/browser/notification_service.h"
 #include "content/public/browser/render_process_host.h"
 #include "extensions/browser/extension_system.h"
+#include "extensions/browser/info_map.h"
 #include "extensions/common/api/messaging/message.h"
 #include "extensions/common/extension_messages.h"
 #include "extensions/common/file_util.h"
@@ -40,17 +41,17 @@ const uint32_t kFilteredMessageClasses[] = {
 };
 
 // Logs an action to the extension activity log for the specified profile.
-void AddActionToExtensionActivityLog(Profile* profile,
-                                     extensions::ActivityLog* activity_log,
-                                     scoped_refptr<extensions::Action> action) {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  // If the action included a URL, check whether it is for an incognito
-  // profile.  The check is performed here so that it can safely be done from
-  // the UI thread.
-  if (action->page_url().is_valid() || !action->page_title().empty())
-    action->set_page_incognito(profile->IsOffTheRecord());
-  activity_log->LogAction(action);
-}
+// void AddActionToExtensionActivityLog(Profile* profile,
+//                                      extensions::ActivityLog* activity_log,
+//                                      scoped_refptr<extensions::Action> action) {
+//   DCHECK_CURRENTLY_ON(BrowserThread::UI);
+//   // If the action included a URL, check whether it is for an incognito
+//   // profile.  The check is performed here so that it can safely be done from
+//   // the UI thread.
+//   if (action->page_url().is_valid() || !action->page_title().empty())
+//     action->set_page_incognito(profile->IsOffTheRecord());
+//   activity_log->LogAction(action);
+// }
 
 }  // namespace
 
@@ -61,7 +62,7 @@ ChromeExtensionMessageFilter::ChromeExtensionMessageFilter(
                            arraysize(kFilteredMessageClasses)),
       render_process_id_(render_process_id),
       profile_(profile),
-      activity_log_(extensions::ActivityLog::GetInstance(profile)),
+      // activity_log_(extensions::ActivityLog::GetInstance(profile)),
       extension_info_map_(
           extensions::ExtensionSystem::Get(profile)->info_map()) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
@@ -90,12 +91,12 @@ bool ChromeExtensionMessageFilter::OnMessageReceived(
     IPC_MESSAGE_HANDLER(ExtensionHostMsg_PostMessage, OnPostMessage)
     IPC_MESSAGE_HANDLER_DELAY_REPLY(ExtensionHostMsg_GetMessageBundle,
                                     OnGetExtMessageBundle)
-    IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddAPIActionToActivityLog,
-                        OnAddAPIActionToExtensionActivityLog);
-    IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddDOMActionToActivityLog,
-                        OnAddDOMActionToExtensionActivityLog);
-    IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddEventToActivityLog,
-                        OnAddEventToExtensionActivityLog);
+    // IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddAPIActionToActivityLog,
+    //                     OnAddAPIActionToExtensionActivityLog);
+    // IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddDOMActionToActivityLog,
+    //                     OnAddDOMActionToExtensionActivityLog);
+    // IPC_MESSAGE_HANDLER(ExtensionHostMsg_AddEventToActivityLog,
+    //                     OnAddEventToExtensionActivityLog);
     IPC_MESSAGE_UNHANDLED(handled = false)
   IPC_END_MESSAGE_MAP()
 
@@ -108,9 +109,9 @@ void ChromeExtensionMessageFilter::OverrideThreadForMessage(
     case ExtensionHostMsg_OpenMessagePort::ID:
     case ExtensionHostMsg_CloseMessagePort::ID:
     case ExtensionHostMsg_PostMessage::ID:
-    case ExtensionHostMsg_AddAPIActionToActivityLog::ID:
-    case ExtensionHostMsg_AddDOMActionToActivityLog::ID:
-    case ExtensionHostMsg_AddEventToActivityLog::ID:
+    // case ExtensionHostMsg_AddAPIActionToActivityLog::ID:
+    // case ExtensionHostMsg_AddDOMActionToActivityLog::ID:
+    // case ExtensionHostMsg_AddEventToActivityLog::ID:
       *thread = BrowserThread::UI;
       break;
     default:
@@ -304,56 +305,56 @@ void ChromeExtensionMessageFilter::OnGetExtMessageBundleOnBlockingPool(
   Send(reply_msg);
 }
 
-void ChromeExtensionMessageFilter::OnAddAPIActionToExtensionActivityLog(
-    const std::string& extension_id,
-    const ExtensionHostMsg_APIActionOrEvent_Params& params) {
-  if (!ShouldLogExtensionAction(extension_id))
-    return;
-
-  scoped_refptr<extensions::Action> action = new extensions::Action(
-      extension_id, base::Time::Now(), extensions::Action::ACTION_API_CALL,
-      params.api_call);
-  action->set_args(base::WrapUnique(params.arguments.DeepCopy()));
-  if (!params.extra.empty()) {
-    action->mutable_other()->SetString(
-        activity_log_constants::kActionExtra, params.extra);
-  }
-  AddActionToExtensionActivityLog(profile_, activity_log_, action);
-}
-
-void ChromeExtensionMessageFilter::OnAddDOMActionToExtensionActivityLog(
-    const std::string& extension_id,
-    const ExtensionHostMsg_DOMAction_Params& params) {
-  if (!ShouldLogExtensionAction(extension_id))
-    return;
-
-  scoped_refptr<extensions::Action> action = new extensions::Action(
-      extension_id, base::Time::Now(), extensions::Action::ACTION_DOM_ACCESS,
-      params.api_call);
-  action->set_args(base::WrapUnique(params.arguments.DeepCopy()));
-  action->set_page_url(params.url);
-  action->set_page_title(base::UTF16ToUTF8(params.url_title));
-  action->mutable_other()->SetInteger(activity_log_constants::kActionDomVerb,
-                                      params.call_type);
-  AddActionToExtensionActivityLog(profile_, activity_log_, action);
-}
-
-void ChromeExtensionMessageFilter::OnAddEventToExtensionActivityLog(
-    const std::string& extension_id,
-    const ExtensionHostMsg_APIActionOrEvent_Params& params) {
-  if (!ShouldLogExtensionAction(extension_id))
-    return;
-
-  scoped_refptr<extensions::Action> action = new extensions::Action(
-      extension_id, base::Time::Now(), extensions::Action::ACTION_API_EVENT,
-      params.api_call);
-  action->set_args(base::WrapUnique(params.arguments.DeepCopy()));
-  if (!params.extra.empty()) {
-    action->mutable_other()->SetString(activity_log_constants::kActionExtra,
-                                       params.extra);
-  }
-  AddActionToExtensionActivityLog(profile_, activity_log_, action);
-}
+// void ChromeExtensionMessageFilter::OnAddAPIActionToExtensionActivityLog(
+//     const std::string& extension_id,
+//     const ExtensionHostMsg_APIActionOrEvent_Params& params) {
+//   if (!ShouldLogExtensionAction(extension_id))
+//     return;
+
+//   scoped_refptr<extensions::Action> action = new extensions::Action(
+//       extension_id, base::Time::Now(), extensions::Action::ACTION_API_CALL,
+//       params.api_call);
+//   action->set_args(base::WrapUnique(params.arguments.DeepCopy()));
+//   if (!params.extra.empty()) {
+//     action->mutable_other()->SetString(
+//         activity_log_constants::kActionExtra, params.extra);
+//   }
+//   AddActionToExtensionActivityLog(profile_, activity_log_, action);
+// }
+
+// void ChromeExtensionMessageFilter::OnAddDOMActionToExtensionActivityLog(
+//     const std::string& extension_id,
+//     const ExtensionHostMsg_DOMAction_Params& params) {
+//   if (!ShouldLogExtensionAction(extension_id))
+//     return;
+
+//   scoped_refptr<extensions::Action> action = new extensions::Action(
+//       extension_id, base::Time::Now(), extensions::Action::ACTION_DOM_ACCESS,
+//       params.api_call);
+//   action->set_args(base::WrapUnique(params.arguments.DeepCopy()));
+//   action->set_page_url(params.url);
+//   action->set_page_title(base::UTF16ToUTF8(params.url_title));
+//   action->mutable_other()->SetInteger(activity_log_constants::kActionDomVerb,
+//                                       params.call_type);
+//   AddActionToExtensionActivityLog(profile_, activity_log_, action);
+// }
+
+// void ChromeExtensionMessageFilter::OnAddEventToExtensionActivityLog(
+//     const std::string& extension_id,
+//     const ExtensionHostMsg_APIActionOrEvent_Params& params) {
+//   if (!ShouldLogExtensionAction(extension_id))
+//     return;
+
+//   scoped_refptr<extensions::Action> action = new extensions::Action(
+//       extension_id, base::Time::Now(), extensions::Action::ACTION_API_EVENT,
+//       params.api_call);
+//   action->set_args(base::WrapUnique(params.arguments.DeepCopy()));
+//   if (!params.extra.empty()) {
+//     action->mutable_other()->SetString(activity_log_constants::kActionExtra,
+//                                        params.extra);
+//   }
+//   AddActionToExtensionActivityLog(profile_, activity_log_, action);
+// }
 
 void ChromeExtensionMessageFilter::Observe(
     int type,
@@ -361,7 +362,7 @@ void ChromeExtensionMessageFilter::Observe(
     const content::NotificationDetails& details) {
   DCHECK_EQ(chrome::NOTIFICATION_PROFILE_DESTROYED, type);
   profile_ = NULL;
-  activity_log_ = nullptr;
+  // activity_log_ = nullptr;
 }
 
 bool ChromeExtensionMessageFilter::ShouldLogExtensionAction(
@@ -370,7 +371,8 @@ bool ChromeExtensionMessageFilter::ShouldLogExtensionAction(
   // conditions (e.g. logging gets disabled but the renderer sends the message
   // before it gets updated), we still need this check here.
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  return profile_ &&
-         g_browser_process->profile_manager()->IsValidProfile(profile_) &&
-         activity_log_ && activity_log_->ShouldLog(extension_id);
+  // return profile_ &&
+  //        g_browser_process->profile_manager()->IsValidProfile(profile_) &&
+  //        activity_log_ && activity_log_->ShouldLog(extension_id);
+  return false;
 }
diff --git a/chrome/browser/renderer_host/chrome_extension_message_filter.h b/chrome/browser/renderer_host/chrome_extension_message_filter.h
index ff79393b4f37cf748851ddaaf8ae5962e8011cae..3e0d1459127a73bb5b17f28932fa38625f61555a 100644
--- a/chrome/browser/renderer_host/chrome_extension_message_filter.h
+++ b/chrome/browser/renderer_host/chrome_extension_message_filter.h
@@ -97,18 +97,18 @@ class ChromeExtensionMessageFilter : public content::BrowserMessageFilter,
   void OnGetExtMessageBundleOnBlockingPool(
       const std::string& extension_id,
       IPC::Message* reply_msg);
-  void OnAddAPIActionToExtensionActivityLog(
-      const std::string& extension_id,
-      const ExtensionHostMsg_APIActionOrEvent_Params& params);
-  void OnAddBlockedCallToExtensionActivityLog(
-      const std::string& extension_id,
-      const std::string& function_name);
-  void OnAddDOMActionToExtensionActivityLog(
-      const std::string& extension_id,
-      const ExtensionHostMsg_DOMAction_Params& params);
-  void OnAddEventToExtensionActivityLog(
-      const std::string& extension_id,
-      const ExtensionHostMsg_APIActionOrEvent_Params& params);
+  // void OnAddAPIActionToExtensionActivityLog(
+  //     const std::string& extension_id,
+  //     const ExtensionHostMsg_APIActionOrEvent_Params& params);
+  // void OnAddBlockedCallToExtensionActivityLog(
+  //     const std::string& extension_id,
+  //     const std::string& function_name);
+  // void OnAddDOMActionToExtensionActivityLog(
+  //     const std::string& extension_id,
+  //     const ExtensionHostMsg_DOMAction_Params& params);
+  // void OnAddEventToExtensionActivityLog(
+  //     const std::string& extension_id,
+  //     const ExtensionHostMsg_APIActionOrEvent_Params& params);
 
   // content::NotificationObserver implementation.
   void Observe(int type,
diff --git a/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc b/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
index 0da4a534c0adae8b0edd2ffeace9972ce3e63c6c..563610d3575b85ba75a02de7eb2739f5d53058c7 100644
--- a/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
+++ b/chrome/browser/renderer_host/pepper/chrome_browser_pepper_host_factory.cc
@@ -58,6 +58,7 @@ ChromeBrowserPepperHostFactory::CreateResourceHost(
         return std::unique_ptr<ResourceHost>(new MessageFilterHost(
             host_->GetPpapiHost(), instance, resource, pv_filter));
       }
+#if 0
       case PpapiHostMsg_OutputProtection_Create::ID: {
         scoped_refptr<ResourceMessageFilter> output_protection_filter(
             new chrome::PepperOutputProtectionMessageFilter(host_, instance));
@@ -65,6 +66,7 @@ ChromeBrowserPepperHostFactory::CreateResourceHost(
             new MessageFilterHost(host_->GetPpapiHost(), instance, resource,
                                   output_protection_filter));
       }
+#endif
     }
   }
 
diff --git a/chrome/common/BUILD.gn b/chrome/common/BUILD.gn
index 443a67cee597410b5ebd304c4d59e1927b925605..241c3070a0852eca908c7e0a0c64fd439d4a360d 100644
--- a/chrome/common/BUILD.gn
+++ b/chrome/common/BUILD.gn
@@ -437,6 +437,7 @@ static_library("common") {
       "importer/safari_importer_utils.h",
       "importer/safari_importer_utils.mm",
     ]
+    include_dirs = [ "//electron" ]
   }
 
   if (is_chromeos) {
diff --git a/chrome/common/chrome_constants.cc b/chrome/common/chrome_constants.cc
index ed6711e2b89f764941c941b9e3d61551c8ce004a..bb45510b2c6f94ee81ef491a76272b5cdb1f6f31 100644
--- a/chrome/common/chrome_constants.cc
+++ b/chrome/common/chrome_constants.cc
@@ -10,11 +10,11 @@
 #define FPL FILE_PATH_LITERAL
 
 #if defined(OS_MACOSX)
-#define CHROMIUM_PRODUCT_STRING "Chromium"
+#define CHROMIUM_PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #if defined(GOOGLE_CHROME_BUILD)
-#define PRODUCT_STRING "Google Chrome"
+#define PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #elif defined(CHROMIUM_BUILD)
-#define PRODUCT_STRING "Chromium"
+#define PRODUCT_STRING PRODUCT_SHORTNAME_STRING
 #else
 #error Unknown branding
 #endif
@@ -43,13 +43,13 @@ const char kChromeVersion[] = CHROME_VERSION_STRING;
 
 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kBrowserProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kHelperProcessExecutableName[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING);
@@ -61,7 +61,7 @@ const base::FilePath::CharType kHelperProcessExecutableName[] =
     FPL(PRODUCT_STRING " Helper");
 #elif defined(OS_ANDROID)
 // NOTE: Keep it synced with the process names defined in AndroidManifest.xml.
-const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("chrome");
+const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
     FPL("");
 const base::FilePath::CharType kHelperProcessExecutableName[] =
@@ -69,8 +69,8 @@ const base::FilePath::CharType kHelperProcessExecutableName[] =
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] = FPL("");
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutableNameChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kBrowserProcessExecutableName[] = FPL(EXECUTABLE_NAME);
 // Helper processes end up with a name of "exe" due to execing via
 // /proc/self/exe.  See bug 22703.
 const base::FilePath::CharType kHelperProcessExecutableNameChromium[] =
@@ -80,13 +80,13 @@ const base::FilePath::CharType kHelperProcessExecutableName[] = FPL("exe");
 
 #if defined(OS_WIN)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kBrowserProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 const base::FilePath::CharType kHelperProcessExecutablePath[] =
-    FPL("chrome.exe");
+    FPL("Brave.exe");
 #elif defined(OS_MACOSX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
     FPL(CHROMIUM_PRODUCT_STRING ".app/Contents/MacOS/" CHROMIUM_PRODUCT_STRING);
@@ -98,19 +98,19 @@ const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
 const base::FilePath::CharType kHelperProcessExecutablePath[] =
     FPL(PRODUCT_STRING " Helper.app/Contents/MacOS/" PRODUCT_STRING " Helper");
 #elif defined(OS_ANDROID)
-const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
-const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
+const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
+    FPL(EXECUTABLE_NAME);
 #elif defined(OS_POSIX)
 const base::FilePath::CharType kBrowserProcessExecutablePathChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kBrowserProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 const base::FilePath::CharType kHelperProcessExecutablePathChromium[] =
-    FPL("chrome");
-const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL("chrome");
+    FPL(EXECUTABLE_NAME);
+const base::FilePath::CharType kHelperProcessExecutablePath[] = FPL(EXECUTABLE_NAME);
 #endif  // OS_*
 
 #if defined(OS_MACOSX)
@@ -119,8 +119,8 @@ const base::FilePath::CharType kFrameworkName[] =
 #endif  // OS_MACOSX
 
 #if defined(OS_WIN)
-const base::FilePath::CharType kBrowserResourcesDll[] = FPL("chrome.dll");
-const base::FilePath::CharType kChromeElfDllName[] = FPL("chrome_elf.dll");
+const base::FilePath::CharType kBrowserResourcesDll[] = FPL("Brave.dll");
+const base::FilePath::CharType kChromeElfDllName[] = FPL("Brave_elf.dll");
 const base::FilePath::CharType kStatusTrayWindowClass[] =
     FPL("Chrome_StatusTrayWindow");
 #endif  // defined(OS_WIN)
diff --git a/chrome/common/chrome_paths_mac.mm b/chrome/common/chrome_paths_mac.mm
index d0bbbf72ff0e356e424dc280eeb1441c990b5770..8e96ea5706f87ea98ba55fcb583b16a8035fa903 100644
--- a/chrome/common/chrome_paths_mac.mm
+++ b/chrome/common/chrome_paths_mac.mm
@@ -41,7 +41,9 @@ NSBundle* OuterAppBundleInternal() {
 
   // From C.app/Contents/Versions/1.2.3.4, go up three steps to get to C.app.
   base::FilePath versioned_dir = chrome::GetVersionedDirectory();
-  base::FilePath outer_app_dir = versioned_dir.DirName().DirName().DirName();
+  // electron uses Frameworks in place of Versions/1.2.3.4
+  // TODO(bridiver) - change this to match chrome
+  base::FilePath outer_app_dir = versioned_dir.DirName().DirName();
   const char* outer_app_dir_c = outer_app_dir.value().c_str();
   NSString* outer_app_dir_ns = [NSString stringWithUTF8String:outer_app_dir_c];
 
diff --git a/chrome/common/chrome_version.h.in b/chrome/common/chrome_version.h.in
index f0a0bcd0098ec31b18bb00588ad8fd11b439fd6f..888572f87a71e6e8444bd6a302343e453aef4287 100644
--- a/chrome/common/chrome_version.h.in
+++ b/chrome/common/chrome_version.h.in
@@ -22,3 +22,5 @@
 // Changelist Information
 
 #define LASTCHANGE_STRING "@LASTCHANGE@"
+
+#define EXECUTABLE_NAME "@EXECUTABLE_NAME@"
diff --git a/chrome/common/importer/edge_importer_utils_win.cc b/chrome/common/importer/edge_importer_utils_win.cc
index c2abd64b2d7c5166c1fdbaaf782974cb4bcc5e53..fcfa405727bcc53ac5b205e96ec15259ac184383 100644
--- a/chrome/common/importer/edge_importer_utils_win.cc
+++ b/chrome/common/importer/edge_importer_utils_win.cc
@@ -73,7 +73,8 @@ bool IsEdgeFavoritesLegacyMode() {
   // for its favorites.
   if (key.ReadValueDW(L"FavoritesESEEnabled", &ese_enabled) == ERROR_SUCCESS)
     return !ese_enabled;
-  return true;
+  // No value to read means not legacy mode
+  return false;
 }
 
 bool EdgeImporterCanImport() {
diff --git a/chrome/common/importer/importer_bridge.h b/chrome/common/importer/importer_bridge.h
index d3fa66b6ae3e8e1f79bb177718af6b22f43c1671..d2b88d3763746c63bfbedee02ebde90421fe67f3 100644
--- a/chrome/common/importer/importer_bridge.h
+++ b/chrome/common/importer/importer_bridge.h
@@ -24,6 +24,8 @@ namespace autofill {
 struct PasswordForm;
 }
 
+struct ImportedCookieEntry;
+
 namespace importer {
 #if defined(OS_WIN)
 struct ImporterIE7PasswordInfo;
@@ -67,6 +69,8 @@ class ImporterBridge : public base::RefCountedThreadSafe<ImporterBridge> {
   virtual void SetAutofillFormData(
       const std::vector<ImporterAutofillFormDataEntry>& entries) = 0;
 
+  virtual void SetCookies(const std::vector<ImportedCookieEntry>& cookies) = 0;
+
   // Notifies the coordinator that the import operation has begun.
   virtual void NotifyStarted() = 0;
 
diff --git a/chrome/common/importer/importer_data_types.h b/chrome/common/importer/importer_data_types.h
index be8163f0ada81c484c64364961d65bf51ff67ec6..a91d871e870eba419c97a58522f7423217f81867 100644
--- a/chrome/common/importer/importer_data_types.h
+++ b/chrome/common/importer/importer_data_types.h
@@ -83,6 +83,7 @@ enum VisitSource {
   VISIT_SOURCE_FIREFOX_IMPORTED = 1,
   VISIT_SOURCE_IE_IMPORTED = 2,
   VISIT_SOURCE_SAFARI_IMPORTED = 3,
+  VISIT_SOURCE_CHROME_IMPORTED = 4,
 };
 
 }  // namespace importer
diff --git a/chrome/common/importer/importer_type.h b/chrome/common/importer/importer_type.h
index c172f8a5bc534465ff4d063a52f9bb510b7e36af..a467f339d012e749ae0625eb004c1614f300a3a1 100644
--- a/chrome/common/importer/importer_type.h
+++ b/chrome/common/importer/importer_type.h
@@ -19,6 +19,8 @@ enum ImporterType {
   TYPE_IE              = 0,
 #endif
   // Value 1 was the (now deleted) Firefox 2 profile importer.
+  // We use it for chrome profile now.
+  TYPE_CHROME         = 1,
   TYPE_FIREFOX         = 2,
 #if defined(OS_MACOSX)
   TYPE_SAFARI          = 3,
diff --git a/chrome/common/importer/profile_import_process_messages.h b/chrome/common/importer/profile_import_process_messages.h
index e53c17127a95b29c22a5c7987bd63574cc83351e..3579cede6d79ef36421821a6b69a81facb586578 100644
--- a/chrome/common/importer/profile_import_process_messages.h
+++ b/chrome/common/importer/profile_import_process_messages.h
@@ -8,6 +8,7 @@
 
 #include "base/strings/string16.h"
 #include "base/values.h"
+#include "brave/common/importer/imported_cookie_entry.h"
 #include "build/build_config.h"
 #include "chrome/common/common_param_traits_macros.h"
 #include "chrome/common/importer/imported_bookmark_entry.h"
@@ -99,6 +100,12 @@ IPC_MESSAGE_CONTROL1(ProfileImportProcessHostMsg_AutofillFormDataImportStart,
 IPC_MESSAGE_CONTROL1(ProfileImportProcessHostMsg_AutofillFormDataImportGroup,
                      std::vector<ImporterAutofillFormDataEntry>)
 
+IPC_MESSAGE_CONTROL1(ProfileImportProcessHostMsg_NotifyCookiesImportStart,
+                     int  /* total number of cookies */)
+
+IPC_MESSAGE_CONTROL1(ProfileImportProcessHostMsg_NotifyCookiesImportGroup,
+                     std::vector<ImportedCookieEntry>)
+
 #if defined(OS_WIN)
 IPC_MESSAGE_CONTROL1(ProfileImportProcessHostMsg_NotifyIE7PasswordInfo,
                      importer::ImporterIE7PasswordInfo) // password_info
diff --git a/chrome/common/importer/profile_import_process_param_traits_macros.h b/chrome/common/importer/profile_import_process_param_traits_macros.h
index 8e8b0c656dfbf809f41f7d5cf46c498de95097e3..5a22e10ddfe619c6d66424c1264f0974cc85950a 100644
--- a/chrome/common/importer/profile_import_process_param_traits_macros.h
+++ b/chrome/common/importer/profile_import_process_param_traits_macros.h
@@ -13,6 +13,7 @@
 
 #include "base/strings/string16.h"
 #include "base/values.h"
+#include "brave/common/importer/imported_cookie_entry.h"
 #include "build/build_config.h"
 #include "chrome/common/common_param_traits_macros.h"
 #include "chrome/common/importer/imported_bookmark_entry.h"
@@ -82,6 +83,17 @@ IPC_STRUCT_TRAITS_BEGIN(ImporterAutofillFormDataEntry)
   IPC_STRUCT_TRAITS_MEMBER(last_used)
 IPC_STRUCT_TRAITS_END()
 
+IPC_STRUCT_TRAITS_BEGIN(ImportedCookieEntry)
+  IPC_STRUCT_TRAITS_MEMBER(domain)
+  IPC_STRUCT_TRAITS_MEMBER(name)
+  IPC_STRUCT_TRAITS_MEMBER(value)
+  IPC_STRUCT_TRAITS_MEMBER(host)
+  IPC_STRUCT_TRAITS_MEMBER(path)
+  IPC_STRUCT_TRAITS_MEMBER(expiry_date)
+  IPC_STRUCT_TRAITS_MEMBER(secure)
+  IPC_STRUCT_TRAITS_MEMBER(httponly)
+IPC_STRUCT_TRAITS_END()
+
 #if defined(OS_WIN)
 IPC_STRUCT_TRAITS_BEGIN(importer::ImporterIE7PasswordInfo)
   IPC_STRUCT_TRAITS_MEMBER(url_hash)
diff --git a/chrome/common/mac/app_mode_chrome_locator.mm b/chrome/common/mac/app_mode_chrome_locator.mm
index efd272e706ba56b748e4b76b96d76cbd03aa07ac..051851c40e6b721035c6b57ed5b359624d55e525 100644
--- a/chrome/common/mac/app_mode_chrome_locator.mm
+++ b/chrome/common/mac/app_mode_chrome_locator.mm
@@ -80,6 +80,7 @@ bool GetChromeBundleInfo(const base::FilePath& chrome_bundle,
   // on the data in their plist, so encode the framework names here.
   NSDictionary* framework_for_exe = @{
     @"Chromium": @"Chromium",
+    @"Brave": @"Brave",
     @"Google Chrome": @"Google Chrome",
     @"Google Chrome Canary": @"Google Chrome",
   };
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
index 086ff4b38b2786faab9323576f4bfbdd3636dc87..48e2f601586d9d2fa59f45ab176a77d787d21d1b 100644
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -1337,19 +1337,19 @@ ChromeContentRendererClient::CreateBrowserPluginDelegate(
 #endif
 }
 
-void ChromeContentRendererClient::RecordRappor(const std::string& metric,
-                                               const std::string& sample) {
-  if (!rappor_recorder_)
-    RenderThread::Get()->GetRemoteInterfaces()->GetInterface(&rappor_recorder_);
-  rappor_recorder_->RecordRappor(metric, sample);
-}
-
-void ChromeContentRendererClient::RecordRapporURL(const std::string& metric,
-                                                  const GURL& url) {
-  if (!rappor_recorder_)
-    RenderThread::Get()->GetRemoteInterfaces()->GetInterface(&rappor_recorder_);
-  rappor_recorder_->RecordRapporURL(metric, url);
-}
+// void ChromeContentRendererClient::RecordRappor(const std::string& metric,
+//                                                const std::string& sample) {
+//   if (!rappor_recorder_)
+//     RenderThread::Get()->GetRemoteInterfaces()->GetInterface(&rappor_recorder_);
+//   rappor_recorder_->RecordRappor(metric, sample);
+// }
+
+// void ChromeContentRendererClient::RecordRapporURL(const std::string& metric,
+//                                                   const GURL& url) {
+//   if (!rappor_recorder_)
+//     RenderThread::Get()->GetRemoteInterfaces()->GetInterface(&rappor_recorder_);
+//   rappor_recorder_->RecordRapporURL(metric, url);
+// }
 
 void ChromeContentRendererClient::AddImageContextMenuProperties(
     const WebURLResponse& response,
diff --git a/chrome/renderer/chrome_content_renderer_client.h b/chrome/renderer/chrome_content_renderer_client.h
index 4f7bbbbc2eed67563eea118cd95dd09fc8a3a1f9..02bca6a120828041cf25dbe066da9df91f75c782 100644
--- a/chrome/renderer/chrome_content_renderer_client.h
+++ b/chrome/renderer/chrome_content_renderer_client.h
@@ -168,9 +168,9 @@ class ChromeContentRendererClient : public content::ContentRendererClient {
       content::RenderFrame* render_frame,
       const std::string& mime_type,
       const GURL& original_url) override;
-  void RecordRappor(const std::string& metric,
-                    const std::string& sample) override;
-  void RecordRapporURL(const std::string& metric, const GURL& url) override;
+  // void RecordRappor(const std::string& metric,
+  //                   const std::string& sample) override;
+  // void RecordRapporURL(const std::string& metric, const GURL& url) override;
   void AddImageContextMenuProperties(
       const blink::WebURLResponse& response,
       std::map<std::string, std::string>* properties) override;
diff --git a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
index 12d432198186daf817c0b903af985b05ce17cda2..8b819a4f8de63109e4740e7c29b54f624739ba09 100644
--- a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
+++ b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
@@ -81,9 +81,9 @@ ChromeRendererPepperHostFactory::CreateResourceHost(
         }
         break;
       }
-      case PpapiHostMsg_FlashDRM_Create::ID:
-        return base::MakeUnique<PepperFlashDRMRendererHost>(host_, instance,
-                                                            resource);
+      // case PpapiHostMsg_FlashDRM_Create::ID:
+      //   return base::MakeUnique<PepperFlashDRMRendererHost>(host_, instance,
+      //                                                       resource);
     }
   }
 
@@ -100,11 +100,11 @@ ChromeRendererPepperHostFactory::CreateResourceHost(
   // time of the corresponding instance's method calls.  Currently these
   // interfaces are available only for whitelisted apps which may not have
   // access to the other private interfaces.
-  switch (message.type()) {
-    case PpapiHostMsg_UMA_Create::ID: {
-      return base::MakeUnique<PepperUMAHost>(host_, instance, resource);
-    }
-  }
+  // switch (message.type()) {
+  //   case PpapiHostMsg_UMA_Create::ID: {
+  //     return base::MakeUnique<PepperUMAHost>(host_, instance, resource);
+  //   }
+  // }
 
   return nullptr;
 }
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index b0dac272b4e4a7583bd61f41ef9da1a1a874d8c8..6b1817a7187ac45f50b5fe9c7b4bcba2d67f962f 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -800,7 +800,7 @@ if (!is_android) {
       }
     }  # enable_notifications
 
-    if (!use_aura || is_chromeos) {
+    if (toolkit_views && (!use_aura || is_chromeos)) {
       sources -= [ "//ui/views/corewm/desktop_capture_controller_unittest.cc" ]
     }
   }
diff --git a/chrome/utility/BUILD.gn b/chrome/utility/BUILD.gn
index 532d5543ec0db1680ddc7146c6979b2da0d10068..b46c7df120bc8c7ab17635a501fe8b19e3f578f6 100644
--- a/chrome/utility/BUILD.gn
+++ b/chrome/utility/BUILD.gn
@@ -97,6 +97,7 @@ static_library("utility") {
       "//chrome/common:mojo_bindings",
       "//net:net_utility_services",
     ]
+    include_dirs = [ "//electron" ]
   }
 
   if (enable_extensions) {
diff --git a/chrome/utility/importer/external_process_importer_bridge.cc b/chrome/utility/importer/external_process_importer_bridge.cc
index d1e4cda7fce1e12c91a543d3f502c7eaf2ad3375..a8082533383d0ff804e641cb9ac8d2c2847f87eb 100644
--- a/chrome/utility/importer/external_process_importer_bridge.cc
+++ b/chrome/utility/importer/external_process_importer_bridge.cc
@@ -27,6 +27,7 @@ const int kNumBookmarksToSend = 100;
 const int kNumHistoryRowsToSend = 100;
 const int kNumFaviconsToSend = 100;
 const int kNumAutofillFormDataToSend = 100;
+const int kNumCookiesToSend = 100;
 
 } // namespace
 
@@ -170,6 +171,30 @@ void ExternalProcessImporterBridge::SetAutofillFormData(
   DCHECK_EQ(0, autofill_form_data_entries_left);
 }
 
+void ExternalProcessImporterBridge::SetCookies(
+    const std::vector<ImportedCookieEntry>& cookies) {
+  Send(new ProfileImportProcessHostMsg_NotifyCookiesImportStart(
+      cookies.size()));
+
+  // |cookies_left| is required for the checks below as Windows has a
+  // Debug bounds-check which prevents pushing an iterator beyond its end()
+  // (i.e., |it + 2 < s.end()| crashes in debug mode if |i + 1 == s.end()|).
+  int cookies_left = cookies.end() - cookies.begin();
+  for (std::vector<ImportedCookieEntry>::const_iterator it =
+           cookies.begin(); it < cookies.end();) {
+    std::vector<ImportedCookieEntry> cookies_group;
+    std::vector<ImportedCookieEntry>::const_iterator end_group =
+        it + std::min(cookies_left, kNumCookiesToSend);
+    cookies_group.assign(it, end_group);
+
+    Send(new ProfileImportProcessHostMsg_NotifyCookiesImportGroup(
+        cookies_group));
+    cookies_left -= end_group - it;
+    it = end_group;
+  }
+  DCHECK_EQ(0, cookies_left);
+}
+
 void ExternalProcessImporterBridge::NotifyStarted() {
   Send(new ProfileImportProcessHostMsg_Import_Started());
 }
diff --git a/chrome/utility/importer/external_process_importer_bridge.h b/chrome/utility/importer/external_process_importer_bridge.h
index 0a22e7e50f69be187e50467b60547ed4382dd5b5..2b75e704bf783ecd0702bd79022f3562021989ba 100644
--- a/chrome/utility/importer/external_process_importer_bridge.h
+++ b/chrome/utility/importer/external_process_importer_bridge.h
@@ -76,6 +76,8 @@ class ExternalProcessImporterBridge : public ImporterBridge {
   void SetAutofillFormData(
       const std::vector<ImporterAutofillFormDataEntry>& entries) override;
 
+  void SetCookies(const std::vector<ImportedCookieEntry>& cookies) override;
+
   void NotifyStarted() override;
   void NotifyItemStarted(importer::ImportItem item) override;
   void NotifyItemEnded(importer::ImportItem item) override;
diff --git a/chrome/utility/importer/firefox_importer.cc b/chrome/utility/importer/firefox_importer.cc
index 8c46d371c475ba8cbc6d3999f521db8584989bdd..c89a8c9cc4da1fb6681ba9c7259e8c305d1728ae 100644
--- a/chrome/utility/importer/firefox_importer.cc
+++ b/chrome/utility/importer/firefox_importer.cc
@@ -15,6 +15,7 @@
 #include "base/message_loop/message_loop.h"
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
+#include "brave/common/importer/imported_cookie_entry.h"
 #include "build/build_config.h"
 #include "chrome/common/importer/firefox_importer_utils.h"
 #include "chrome/common/importer/imported_bookmark_entry.h"
@@ -147,6 +148,11 @@ void FirefoxImporter::StartImport(const importer::SourceProfile& source_profile,
     ImportAutofillFormData();
     bridge_->NotifyItemEnded(importer::AUTOFILL_FORM_DATA);
   }
+  if ((items & importer::COOKIES) && !cancelled()) {
+    bridge_->NotifyItemStarted(importer::COOKIES);
+    ImportCookies();
+    bridge_->NotifyItemEnded(importer::COOKIES);
+  }
   bridge_->NotifyEnded();
 }
 
@@ -434,6 +440,50 @@ void FirefoxImporter::ImportAutofillFormData() {
     bridge_->SetAutofillFormData(form_entries);
 }
 
+void FirefoxImporter::ImportCookies() {
+  base::FilePath file = source_path_.AppendASCII("cookies.sqlite");
+  if (!base::PathExists(file))
+    return;
+
+  sql::Connection db;
+  if (!db.Open(file))
+    return;
+
+  const char query[] =
+      "SELECT baseDomain, name, value, host, path, expiry, isSecure, "
+      "isHttpOnly FROM moz_cookies";
+
+  sql::Statement s(db.GetUniqueStatement(query));
+
+  std::vector<ImportedCookieEntry> cookies;
+  while (s.Step() && !cancelled()) {
+    ImportedCookieEntry cookie;
+    base::string16 domain(base::UTF8ToUTF16("."));
+    domain.append(s.ColumnString16(0));
+    base::string16 host;
+    if (s.ColumnString16(3)[0] == '.') {
+      host.append(base::UTF8ToUTF16("*"));
+      host.append(s.ColumnString16(3));
+    } else {
+      host = s.ColumnString16(3);
+    }
+    cookie.domain = domain;
+    cookie.name = s.ColumnString16(1);
+    cookie.value = s.ColumnString16(2);
+    cookie.host = host;
+    cookie.path = s.ColumnString16(4);
+    cookie.expiry_date =
+      base::Time::FromDoubleT(s.ColumnInt64(5));
+    cookie.secure = s.ColumnBool(6);
+    cookie.httponly = s.ColumnBool(7);
+
+    cookies.push_back(cookie);
+  }
+
+  if (!cookies.empty() && !cancelled())
+    bridge_->SetCookies(cookies);
+}
+
 void FirefoxImporter::GetSearchEnginesXMLData(
     std::vector<std::string>* search_engine_data) {
   base::FilePath file = source_path_.AppendASCII("search.sqlite");
@@ -647,11 +697,12 @@ void FirefoxImporter::LoadRootNodeID(sql::Connection* db,
                                       int* toolbar_folder_id,
                                       int* menu_folder_id,
                                       int* unsorted_folder_id) {
-  static const char kToolbarFolderName[] = "toolbar";
-  static const char kMenuFolderName[] = "menu";
-  static const char kUnsortedFolderName[] = "unfiled";
+  static const char kToolbarFolderName[] = "Bookmarks Toolbar";
+  static const char kMenuFolderName[] = "Bookmarks Menu";
+  static const char kUnsortedFolderName[] = "Other Bookmarks";
+  const char query[] = "SELECT b.title, b.id FROM moz_bookmarks b "
+                       "WHERE b.type = 2";
 
-  const char query[] = "SELECT root_name, folder_id FROM moz_bookmarks_roots";
   sql::Statement s(db->GetUniqueStatement(query));
 
   while (s.Step()) {
diff --git a/chrome/utility/importer/firefox_importer.h b/chrome/utility/importer/firefox_importer.h
index a15df112f21d4bdb7e63eaf29e0ca6ef2fbf0c98..549c5407ecb14a81ce09d10bc5aeba24a77e1654 100644
--- a/chrome/utility/importer/firefox_importer.h
+++ b/chrome/utility/importer/firefox_importer.h
@@ -52,6 +52,7 @@ class FirefoxImporter : public Importer {
   // defined in browserconfig.properties.
   void ImportHomepage();
   void ImportAutofillFormData();
+  void ImportCookies();
   void GetSearchEnginesXMLData(std::vector<std::string>* search_engine_data);
   void GetSearchEnginesXMLDataFromJSON(
       std::vector<std::string>* search_engine_data);
diff --git a/chrome/utility/importer/importer_creator.cc b/chrome/utility/importer/importer_creator.cc
index 2bef627aa890484a3fb75fa9bd04b2994f997305..6cdf479c733c3a546c8fc54bdb29d4bec031f2e1 100644
--- a/chrome/utility/importer/importer_creator.cc
+++ b/chrome/utility/importer/importer_creator.cc
@@ -6,6 +6,7 @@
 
 #include "base/logging.h"
 #include "build/build_config.h"
+#include "brave/utility/importer/chrome_importer.h"
 #include "chrome/utility/importer/bookmarks_file_importer.h"
 #include "chrome/utility/importer/firefox_importer.h"
 
@@ -43,6 +44,8 @@ scoped_refptr<Importer> CreateImporterByType(ImporterType type) {
     case TYPE_SAFARI:
       return new SafariImporter(base::mac::GetUserLibraryPath());
 #endif
+    case TYPE_CHROME:
+      return new ChromeImporter();
     default:
       NOTREACHED();
       return nullptr;
diff --git a/components/font_service/BUILD.gn b/components/font_service/BUILD.gn
index 0777cce337ae70b3616fc7d236663c234553a30b..460e441a1e414ab03062f0b64ae92f6b115ec906 100644
--- a/components/font_service/BUILD.gn
+++ b/components/font_service/BUILD.gn
@@ -38,6 +38,10 @@ service("font_service") {
     "//services/service_manager/public/cpp",
   ]
 
+  if (muon_build) {
+    deps += [ "//third_party/icu:icu_chrome" ]
+  }
+
   data_deps = [
     ":manifest",
   ]
diff --git a/components/guest_view/browser/guest_view_manager.cc b/components/guest_view/browser/guest_view_manager.cc
index 315ea635bfd49e4d1ff029709ff9c39e657d48b8..5d1895a01cd026c8cf1cd399bb1e8b6044874db4 100644
--- a/components/guest_view/browser/guest_view_manager.cc
+++ b/components/guest_view/browser/guest_view_manager.cc
@@ -63,6 +63,7 @@ class GuestViewManager::EmbedderRenderProcessHostObserver
 
 // static
 GuestViewManagerFactory* GuestViewManager::factory_ = nullptr;
+GuestViewManager* manager_ = nullptr;
 
 GuestViewManager::GuestViewManager(
     content::BrowserContext* context,
@@ -87,7 +88,8 @@ GuestViewManager* GuestViewManager::CreateWithDelegate(
     } else {
       guest_manager = new GuestViewManager(context, std::move(delegate));
     }
-    context->SetUserData(kGuestViewManagerKeyName, guest_manager);
+    manager_ = guest_manager;
+    // context->SetUserData(kGuestViewManagerKeyName, guest_manager);
   }
   return guest_manager;
 }
@@ -95,8 +97,9 @@ GuestViewManager* GuestViewManager::CreateWithDelegate(
 // static
 GuestViewManager* GuestViewManager::FromBrowserContext(
     BrowserContext* context) {
-  return static_cast<GuestViewManager*>(context->GetUserData(
-      kGuestViewManagerKeyName));
+  return manager_;
+  // return static_cast<GuestViewManager*>(context->GetUserData(
+  //     kGuestViewManagerKeyName));
 }
 
 content::WebContents* GuestViewManager::GetGuestByInstanceIDSafely(
diff --git a/components/printing/common/print_messages.h b/components/printing/common/print_messages.h
index 3d1e71ae1a04abdcb9680001c86822653254a886..338e971f95bf87b6342ed2942861cbdb00e12bd9 100644
--- a/components/printing/common/print_messages.h
+++ b/components/printing/common/print_messages.h
@@ -223,7 +223,6 @@ IPC_STRUCT_TRAITS_BEGIN(PrintMsg_PrintPages_Params)
   IPC_STRUCT_TRAITS_MEMBER(pages)
 IPC_STRUCT_TRAITS_END()
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Parameters to describe a rendered document.
 IPC_STRUCT_BEGIN(PrintHostMsg_DidPreviewDocument_Params)
   // A shared memory handle to metafile data.
@@ -245,6 +244,7 @@ IPC_STRUCT_BEGIN(PrintHostMsg_DidPreviewDocument_Params)
   IPC_STRUCT_MEMBER(int, preview_request_id)
 IPC_STRUCT_END()
 
+#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Parameters to describe a rendered preview page.
 IPC_STRUCT_BEGIN(PrintHostMsg_DidPreviewPage_Params)
   // A shared memory handle to metafile data for a draft document of the page.
@@ -352,13 +352,11 @@ IPC_MESSAGE_ROUTED1(PrintMsg_PrintingDone,
 // Tells the RenderFrame whether printing is enabled or not.
 IPC_MESSAGE_ROUTED1(PrintMsg_SetPrintingEnabled, bool /* enabled */)
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Tells the RenderFrame to switch the CSS to print media type, renders every
 // requested pages for print preview using the given |settings|. This gets
 // called multiple times as the user updates settings.
 IPC_MESSAGE_ROUTED1(PrintMsg_PrintPreview,
                     base::DictionaryValue /* settings */)
-#endif
 
 // Messages sent from the renderer to the browser.
 
@@ -442,13 +440,13 @@ IPC_SYNC_MESSAGE_ROUTED2_1(PrintHostMsg_CheckForCancel,
                            int32_t /* PrintPreviewUI ID */,
                            int /* request id */,
                            bool /* print preview cancelled */)
+#endif
 
 // Sends back to the browser the complete rendered document (non-draft mode,
 // used for printing) that was requested by a PrintMsg_PrintPreview message.
 // The memory handle in this message is already valid in the browser process.
 IPC_MESSAGE_ROUTED1(PrintHostMsg_MetafileReadyForPrinting,
                     PrintHostMsg_DidPreviewDocument_Params /* params */)
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 // This is sent when there are invalid printer settings.
 IPC_MESSAGE_ROUTED0(PrintHostMsg_ShowInvalidPrinterSettingsError)
@@ -457,11 +455,11 @@ IPC_MESSAGE_ROUTED0(PrintHostMsg_ShowInvalidPrinterSettingsError)
 IPC_MESSAGE_ROUTED1(PrintHostMsg_PrintingFailed,
                     int /* document cookie */)
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Tell the browser print preview failed.
 IPC_MESSAGE_ROUTED1(PrintHostMsg_PrintPreviewFailed,
                     int /* document cookie */)
 
+#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Tell the browser print preview was cancelled.
 IPC_MESSAGE_ROUTED1(PrintHostMsg_PrintPreviewCancelled,
                     int /* document cookie */)
diff --git a/components/printing/renderer/print_web_view_helper.cc b/components/printing/renderer/print_web_view_helper.cc
index c72217ae3ca78cde181cc2a18029a1930ad7cd94..229c7dd7bf4ed7a495653616c91edb3cbc03efb8 100644
--- a/components/printing/renderer/print_web_view_helper.cc
+++ b/components/printing/renderer/print_web_view_helper.cc
@@ -321,7 +321,6 @@ bool PrintingNodeOrPdfFrame(const blink::WebLocalFrame* frame,
   return plugin && plugin->supportsPaginatedPrint();
 }
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 // Returns true if the current destination printer is PRINT_TO_PDF.
 bool IsPrintToPdfRequested(const base::DictionaryValue& job_settings) {
   bool print_to_pdf = false;
@@ -343,7 +342,6 @@ bool PrintingFrameHasPageSizeStyle(blink::WebLocalFrame* frame,
   }
   return frame_has_custom_page_size_style;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 // Disable scaling when either:
 // - The PDF specifies disabling scaling.
@@ -397,7 +395,6 @@ MarginType GetMarginsForPdf(blink::WebLocalFrame* frame,
 }
 #endif
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 bool FitToPageEnabled(const base::DictionaryValue& job_settings) {
   bool fit_to_paper_size = false;
   if (!job_settings.GetBoolean(kSettingFitToPageEnabled, &fit_to_paper_size)) {
@@ -440,7 +437,6 @@ blink::WebPrintScalingOption GetPrintScalingOption(
   }
   return blink::WebPrintScalingOptionFitToPrintableArea;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 // Helper function to scale and round an integer value with a double valued
 // scaling.
@@ -997,9 +993,9 @@ bool PrintWebViewHelper::OnMessageReceived(const IPC::Message& message) {
 #endif
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
     IPC_MESSAGE_HANDLER(PrintMsg_InitiatePrintPreview, OnInitiatePrintPreview)
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
     IPC_MESSAGE_HANDLER(PrintMsg_PrintPreview, OnPrintPreview)
     IPC_MESSAGE_HANDLER(PrintMsg_PrintingDone, OnPrintingDone)
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
     IPC_MESSAGE_HANDLER(PrintMsg_SetPrintingEnabled, OnSetPrintingEnabled)
     IPC_MESSAGE_UNHANDLED(handled = false)
   IPC_END_MESSAGE_MAP()
@@ -1016,8 +1012,6 @@ void PrintWebViewHelper::OnDestruct() {
 
 #if BUILDFLAG(ENABLE_BASIC_PRINTING)
 void PrintWebViewHelper::OnPrintPages() {
-  if (ipc_nesting_level_> 1)
-    return;
 
   blink::WebLocalFrame* frame = render_frame()->GetWebFrame();
 
@@ -1127,16 +1121,9 @@ void PrintWebViewHelper::UpdateFrameMarginsCssInfo(
   ignore_css_margins_ = (margins_type != DEFAULT_MARGINS);
 }
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
-  if (ipc_nesting_level_ > 1)
-    return;
-
-  print_preview_context_.OnPrintPreview();
-
-  UMA_HISTOGRAM_ENUMERATION("PrintPreview.PreviewEvent",
-                            PREVIEW_EVENT_REQUESTED, PREVIEW_EVENT_MAX);
-
+  blink::WebLocalFrame* frame = render_frame()->GetWebFrame();
+  print_preview_context_.InitWithFrame(frame);
   if (!print_preview_context_.source_frame()) {
     DidFinishPrinting(FAIL_PREVIEW);
     return;
@@ -1144,44 +1131,18 @@ void PrintWebViewHelper::OnPrintPreview(const base::DictionaryValue& settings) {
 
   if (!UpdatePrintSettings(print_preview_context_.source_frame(),
                            print_preview_context_.source_node(), settings)) {
-    if (print_preview_context_.last_error() != PREVIEW_ERROR_BAD_SETTING) {
-      Send(new PrintHostMsg_PrintPreviewInvalidPrinterSettings(
-          routing_id(), print_pages_params_
-                            ? print_pages_params_->params.document_cookie
-                            : 0));
-      notify_browser_of_print_failure_ = false;  // Already sent.
-    }
     DidFinishPrinting(FAIL_PREVIEW);
     return;
   }
 
-  // Set the options from document if we are previewing a pdf and send a
-  // message to browser.
-  if (print_pages_params_->params.is_first_request &&
-      !print_preview_context_.IsModifiable()) {
-    PrintHostMsg_SetOptionsFromDocument_Params options;
-    if (SetOptionsFromPdfDocument(&options))
-      Send(new PrintHostMsg_SetOptionsFromDocument(routing_id(), options));
-  }
-
   is_print_ready_metafile_sent_ = false;
-
-  // PDF printer device supports alpha blending.
-  print_pages_params_->params.supports_alpha_blend = true;
-
-  bool generate_draft_pages = false;
-  if (!settings.GetBoolean(kSettingGenerateDraftData, &generate_draft_pages)) {
-    NOTREACHED();
-  }
-  print_preview_context_.set_generate_draft_pages(generate_draft_pages);
-
   PrepareFrameForPreviewDocument();
 }
 
 void PrintWebViewHelper::PrepareFrameForPreviewDocument() {
   reset_prep_frame_view_ = false;
 
-  if (!print_pages_params_ || CheckForCancel()) {
+  if (!print_pages_params_) {
     DidFinishPrinting(FAIL_PREVIEW);
     return;
   }
@@ -1212,12 +1173,9 @@ void PrintWebViewHelper::OnFramePreparedForPreviewDocument() {
 }
 
 bool PrintWebViewHelper::CreatePreviewDocument() {
-  if (!print_pages_params_ || CheckForCancel())
+  if (!print_pages_params_)
     return false;
 
-  UMA_HISTOGRAM_ENUMERATION("PrintPreview.PreviewEvent",
-                            PREVIEW_EVENT_CREATE_DOCUMENT, PREVIEW_EVENT_MAX);
-
   const PrintMsg_Print_Params& print_params = print_pages_params_->params;
   const std::vector<int>& pages = print_pages_params_->pages;
 
@@ -1226,71 +1184,12 @@ bool PrintWebViewHelper::CreatePreviewDocument() {
     return false;
   }
 
-  PageSizeMargins default_page_layout;
-  double scale_factor =
-      print_params.scale_factor >= kEpsilon ? print_params.scale_factor : 1.0f;
-
-  ComputePageLayoutInPointsForCss(print_preview_context_.prepared_frame(), 0,
-                                  print_params, ignore_css_margins_,
-                                  &scale_factor, &default_page_layout);
-  bool has_page_size_style =
-      PrintingFrameHasPageSizeStyle(print_preview_context_.prepared_frame(),
-                                    print_preview_context_.total_page_count());
-  int dpi = GetDPI(&print_params);
-
-  gfx::Rect printable_area_in_points(
-      ConvertUnit(print_params.printable_area.x(), dpi, kPointsPerInch),
-      ConvertUnit(print_params.printable_area.y(), dpi, kPointsPerInch),
-      ConvertUnit(print_params.printable_area.width(), dpi, kPointsPerInch),
-      ConvertUnit(print_params.printable_area.height(), dpi, kPointsPerInch));
-
-  double fit_to_page_scale_factor = 1.0f;
-  if (!print_preview_context_.IsModifiable()) {
-    blink::WebLocalFrame* source_frame = print_preview_context_.source_frame();
-    const blink::WebNode& source_node = print_preview_context_.source_node();
-    blink::WebPrintPresetOptions preset_options;
-    if (source_frame->getPrintPresetOptionsForPlugin(source_node,
-                                                     &preset_options)) {
-      if (preset_options.isPageSizeUniform) {
-        double scale_width =
-            static_cast<double>(printable_area_in_points.width()) /
-            static_cast<double>(preset_options.uniformPageSize.width);
-        double scale_height =
-            static_cast<double>(printable_area_in_points.height()) /
-            static_cast<double>(preset_options.uniformPageSize.height);
-        fit_to_page_scale_factor = std::min(scale_width, scale_height);
-      } else {
-        fit_to_page_scale_factor = 0.0f;
-      }
-    }
-  }
-  int fit_to_page_scaling = static_cast<int>(100.0f * fit_to_page_scale_factor);
-  // Margins: Send default page layout to browser process.
-  Send(new PrintHostMsg_DidGetDefaultPageLayout(routing_id(),
-                                                default_page_layout,
-                                                printable_area_in_points,
-                                                has_page_size_style));
-
-  PrintHostMsg_DidGetPreviewPageCount_Params params;
-  params.page_count = print_preview_context_.total_page_count();
-  params.is_modifiable = print_preview_context_.IsModifiable();
-  params.fit_to_page_scaling = fit_to_page_scaling;
-  params.document_cookie = print_params.document_cookie;
-  params.preview_request_id = print_params.preview_request_id;
-  params.clear_preview_data = print_preview_context_.generate_draft_pages();
-  Send(new PrintHostMsg_DidGetPreviewPageCount(routing_id(), params));
-  if (CheckForCancel())
-    return false;
-
   while (!print_preview_context_.IsFinalPageRendered()) {
     int page_number = print_preview_context_.GetNextPageNumber();
     DCHECK_GE(page_number, 0);
     if (!RenderPreviewPage(page_number, print_params))
       return false;
 
-    if (CheckForCancel())
-      return false;
-
     // We must call PrepareFrameAndViewForPrint::FinishPrinting() (by way of
     // print_preview_context_.AllPagesRendered()) before calling
     // FinalizePrintReadyDocument() when printing a PDF because the plugin
@@ -1312,7 +1211,7 @@ bool PrintWebViewHelper::CreatePreviewDocument() {
   return true;
 }
 
-#if !defined(OS_MACOSX) && BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#if !defined(OS_MACOSX)
 bool PrintWebViewHelper::RenderPreviewPage(
     int page_number,
     const PrintMsg_Print_Params& print_params) {
@@ -1342,7 +1241,7 @@ bool PrintWebViewHelper::RenderPreviewPage(
   }
   return PreviewPageRendered(page_number, draft_metafile.get());
 }
-#endif  // !defined(OS_MACOSX) && BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#endif  // !defined(OS_MACOSX)
 
 bool PrintWebViewHelper::FinalizePrintReadyDocument() {
   DCHECK(!is_print_ready_metafile_sent_);
@@ -1372,11 +1271,8 @@ bool PrintWebViewHelper::FinalizePrintReadyDocument() {
   Send(new PrintHostMsg_MetafileReadyForPrinting(routing_id(), preview_params));
   return true;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 void PrintWebViewHelper::OnPrintingDone(bool success) {
-  if (ipc_nesting_level_ > 1)
-    return;
   notify_browser_of_print_failure_ = false;
   if (!success)
     LOG(ERROR) << "Failure in OnPrintingDone";
@@ -1521,19 +1417,13 @@ void PrintWebViewHelper::DidFinishPrinting(PrintingResult result) {
       }
       break;
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
     case FAIL_PREVIEW:
-      int cookie =
-          print_pages_params_ ? print_pages_params_->params.document_cookie : 0;
-      if (notify_browser_of_print_failure_) {
-        LOG(ERROR) << "CreatePreviewDocument failed";
-        Send(new PrintHostMsg_PrintPreviewFailed(routing_id(), cookie));
-      } else {
-        Send(new PrintHostMsg_PrintPreviewCancelled(routing_id(), cookie));
+      LOG(ERROR) << "PREVIEW FAILED.";
+      if (print_pages_params_) {
+        Send(new PrintHostMsg_PrintPreviewFailed(routing_id(),
+                 print_pages_params_->params.document_cookie));
       }
-      print_preview_context_.Failed(notify_browser_of_print_failure_);
       break;
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
   }
   prep_frame_view_.reset();
   print_pages_params_.reset();
@@ -1696,6 +1586,7 @@ bool PrintWebViewHelper::SetOptionsFromPdfDocument(
   }
   return true;
 }
+#endif  // defined(ENABLE_PRINT_PREVIEW)
 
 bool PrintWebViewHelper::UpdatePrintSettings(
     blink::WebLocalFrame* frame,
@@ -1738,27 +1629,13 @@ bool PrintWebViewHelper::UpdatePrintSettings(
     return false;
   }
 
-  if (!job_settings->GetInteger(kPreviewUIID, &settings.params.preview_ui_id)) {
-    NOTREACHED();
-    print_preview_context_.set_error(PREVIEW_ERROR_BAD_SETTING);
-    return false;
-  }
-
   if (!print_for_preview_) {
-    // Validate expected print preview settings.
-    if (!job_settings->GetInteger(kPreviewRequestID,
-                                  &settings.params.preview_request_id) ||
-        !job_settings->GetBoolean(kIsFirstRequest,
-                                  &settings.params.is_first_request)) {
-      NOTREACHED();
-      print_preview_context_.set_error(PREVIEW_ERROR_BAD_SETTING);
-      return false;
-    }
-
-    settings.params.print_to_pdf = IsPrintToPdfRequested(*job_settings);
+    job_settings->GetInteger(kPreviewRequestID,
+        &settings.params.preview_request_id);
+    settings.params.print_to_pdf = true;
     UpdateFrameMarginsCssInfo(*job_settings);
-    settings.params.print_scaling_option = GetPrintScalingOption(
-        frame, node, source_is_html, *job_settings, settings.params);
+    settings.params.print_scaling_option =
+      blink::WebPrintScalingOptionSourceSize;
   }
 
   SetPrintPagesParams(settings);
@@ -1766,13 +1643,10 @@ bool PrintWebViewHelper::UpdatePrintSettings(
   if (PrintMsg_Print_Params_IsValid(settings.params))
     return true;
 
-  if (print_for_preview_)
-    Send(new PrintHostMsg_ShowInvalidPrinterSettingsError(routing_id()));
-  else
+  if (!print_for_preview_)
     print_preview_context_.set_error(PREVIEW_ERROR_INVALID_PRINTER_SETTINGS);
   return false;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 #if BUILDFLAG(ENABLE_BASIC_PRINTING)
 void PrintWebViewHelper::GetPrintSettingsFromUser(
@@ -2024,6 +1898,7 @@ bool PrintWebViewHelper::CheckForCancel() {
     notify_browser_of_print_failure_ = false;
   return cancel;
 }
+#endif  // defined(ENABLE_PRINT_PREVIEW)
 
 bool PrintWebViewHelper::PreviewPageRendered(int page_number,
                                              PdfMetafileSkia* metafile) {
@@ -2045,23 +1920,8 @@ bool PrintWebViewHelper::PreviewPageRendered(int page_number,
     return false;
   }
 
-  PrintHostMsg_DidPreviewPage_Params preview_page_params;
-  // Get the size of the resulting metafile.
-  if (!CopyMetafileDataToSharedMem(
-          *metafile, &(preview_page_params.metafile_data_handle))) {
-    LOG(ERROR) << "CopyMetafileDataToSharedMem failed";
-    print_preview_context_.set_error(PREVIEW_ERROR_METAFILE_COPY_FAILED);
-    return false;
-  }
-  preview_page_params.data_size = metafile->GetDataSize();
-  preview_page_params.page_number = page_number;
-  preview_page_params.preview_request_id =
-      print_pages_params_->params.preview_request_id;
-
-  Send(new PrintHostMsg_DidPreviewPage(routing_id(), preview_page_params));
   return true;
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 PrintWebViewHelper::PrintPreviewContext::PrintPreviewContext()
     : total_page_count_(0),
diff --git a/components/printing/renderer/print_web_view_helper.h b/components/printing/renderer/print_web_view_helper.h
index 0730f76303b4bc8fc92b8da47e01b6ffc116694a..d54187b61909956733a2a0caf10c68973118a95d 100644
--- a/components/printing/renderer/print_web_view_helper.h
+++ b/components/printing/renderer/print_web_view_helper.h
@@ -145,9 +145,7 @@ class PrintWebViewHelper
     OK,
     FAIL_PRINT_INIT,
     FAIL_PRINT,
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
     FAIL_PREVIEW,
-#endif
   };
 
   enum PrintPreviewErrorBuckets {
@@ -185,8 +183,8 @@ class PrintWebViewHelper
 #endif  // BUILDFLAG(ENABLE_BASIC_PRINTING)
 #if BUILDFLAG(ENABLE_PRINT_PREVIEW)
   void OnInitiatePrintPreview(bool has_selection);
-  void OnPrintPreview(const base::DictionaryValue& settings);
 #endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
+  void OnPrintPreview(const base::DictionaryValue& settings);
   void OnPrintingDone(bool success);
 
   // Get |page_size| and |content_area| information from
@@ -199,7 +197,6 @@ class PrintWebViewHelper
   // Update |ignore_css_margins_| based on settings.
   void UpdateFrameMarginsCssInfo(const base::DictionaryValue& settings);
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
   // Prepare frame for creating preview document.
   void PrepareFrameForPreviewDocument();
 
@@ -216,7 +213,6 @@ class PrintWebViewHelper
 
   // Finalize the print ready preview document.
   bool FinalizePrintReadyDocument();
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
   // Enable/Disable printing.
   void OnSetPrintingEnabled(bool enabled);
@@ -250,6 +246,7 @@ class PrintWebViewHelper
   // Set options for print preset from source PDF document.
   bool SetOptionsFromPdfDocument(
       PrintHostMsg_SetOptionsFromDocument_Params* options);
+#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
   // Update the current print settings with new |passed_job_settings|.
   // |passed_job_settings| dictionary contains print job details such as printer
@@ -257,7 +254,6 @@ class PrintWebViewHelper
   bool UpdatePrintSettings(blink::WebLocalFrame* frame,
                            const blink::WebNode& node,
                            const base::DictionaryValue& passed_job_settings);
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 #if BUILDFLAG(ENABLE_BASIC_PRINTING)
   // Get final print settings from the user.
@@ -362,6 +358,7 @@ class PrintWebViewHelper
   // WARNING: |this| may be gone after this method returns when |type| is
   // PRINT_PREVIEW_SCRIPTED.
   void RequestPrintPreview(PrintPreviewRequestType type);
+#endif  // defined(ENABLE_PRINT_PREVIEW)
 
   // Checks whether print preview should continue or not.
   // Returns true if canceling, false if continuing.
@@ -373,7 +370,6 @@ class PrintWebViewHelper
   // |metafile| is the rendered page. Otherwise |metafile| is NULL.
   // Returns true if print preview should continue, false on failure.
   bool PreviewPageRendered(int page_number, PdfMetafileSkia* metafile);
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
   void SetPrintPagesParams(const PrintMsg_PrintPages_Params& settings);
 
diff --git a/components/printing/renderer/print_web_view_helper_mac.mm b/components/printing/renderer/print_web_view_helper_mac.mm
index ff49472ba68692cdf09cb4f50de461e94b8c8540..6c6cb01ef34ca6408e49cd603560d2d17d6f36df 100644
--- a/components/printing/renderer/print_web_view_helper_mac.mm
+++ b/components/printing/renderer/print_web_view_helper_mac.mm
@@ -69,7 +69,6 @@ void PrintWebViewHelper::PrintPageInternal(
   Send(new PrintHostMsg_DidPrintPage(routing_id(), page_params));
 }
 
-#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
 bool PrintWebViewHelper::RenderPreviewPage(
     int page_number,
     const PrintMsg_Print_Params& print_params) {
@@ -106,7 +105,6 @@ bool PrintWebViewHelper::RenderPreviewPage(
   }
   return PreviewPageRendered(page_number, draft_metafile.get());
 }
-#endif  // BUILDFLAG(ENABLE_PRINT_PREVIEW)
 
 void PrintWebViewHelper::RenderPage(const PrintMsg_Print_Params& params,
                                     int page_number,
diff --git a/content/app/content_main_runner.cc b/content/app/content_main_runner.cc
index 8dd59dd15828a73caaec9fc357ff460338a1ca41..5a12b5b646722e6f684dba403d2e780f9869ece4 100644
--- a/content/app/content_main_runner.cc
+++ b/content/app/content_main_runner.cc
@@ -224,7 +224,7 @@ void CommonSubprocessInit(const std::string& process_type) {
   setlocale(LC_NUMERIC, "C");
 #endif
 
-#if !defined(OFFICIAL_BUILD)
+#if 0
   // Print stack traces to stderr when crashes occur. This opens up security
   // holes so it should never be enabled for official builds.
   if (!base::CommandLine::ForCurrentProcess()->HasSwitch(
diff --git a/content/browser/accessibility/browser_accessibility_manager_mac.mm b/content/browser/accessibility/browser_accessibility_manager_mac.mm
index 076568758f1b1ef1fe7d0ac53fdda0f0130b800f..037c6426f21edc16b3b5a7a4bf665084686390e7 100644
--- a/content/browser/accessibility/browser_accessibility_manager_mac.mm
+++ b/content/browser/accessibility/browser_accessibility_manager_mac.mm
@@ -93,8 +93,10 @@ NSString* const NSAccessibilityTextSelectionGranularity =
     @"AXTextSelectionGranularity";
 NSString* const NSAccessibilityTextSelectionChangedFocus =
     @"AXTextSelectionChangedFocus";
+#ifndef MAS_BUILD
 NSString* const NSAccessibilitySelectedTextMarkerRangeAttribute =
     @"AXSelectedTextMarkerRange";
+#endif
 NSString* const NSAccessibilityTextChangeElement = @"AXTextChangeElement";
 NSString* const NSAccessibilityTextEditType = @"AXTextEditType";
 NSString* const NSAccessibilityTextChangeValue = @"AXTextChangeValue";
@@ -427,8 +429,10 @@ NSDictionary* BrowserAccessibilityManagerMac::
     focus_object = focus_object->GetClosestPlatformObject();
     auto native_focus_object = ToBrowserAccessibilityCocoa(focus_object);
     if (native_focus_object && [native_focus_object instanceActive]) {
+#ifndef MAS_BUILD
       [user_info setObject:native_focus_object
                     forKey:NSAccessibilityTextChangeElement];
+#endif
 
       id selected_text = [native_focus_object selectedTextMarkerRange];
       if (selected_text) {
diff --git a/content/browser/frame_host/render_frame_message_filter.cc b/content/browser/frame_host/render_frame_message_filter.cc
index 573b5d9082ab756b54c90d5dcbef57e78e97c63f..e61cfa0a15c95c767f807ea1a670aabd35dc8dde 100644
--- a/content/browser/frame_host/render_frame_message_filter.cc
+++ b/content/browser/frame_host/render_frame_message_filter.cc
@@ -491,7 +491,7 @@ void RenderFrameMessageFilter::GetPluginsCallback(
   PluginServiceFilter* filter = PluginServiceImpl::GetInstance()->GetFilter();
   std::vector<WebPluginInfo> plugins;
 
-  int child_process_id = -1;
+  int child_process_id = render_process_id_;
   int routing_id = MSG_ROUTING_NONE;
   // In this loop, copy the WebPluginInfo (and do not use a reference) because
   // the filter might mutate it.
diff --git a/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm b/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
index 92d3617594e49f5c9b6a392d3dde935c02548159..6004636d53feff66cd39a67c920a5ba85f76ffef 100644
--- a/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
+++ b/content/browser/renderer_host/input/synthetic_gesture_target_mac.mm
@@ -21,7 +21,7 @@
 // Filled with default values.
 @property(readonly) CGFloat deltaX;
 @property(readonly) CGFloat deltaY;
-@property(readonly) NSEventModifierFlags modifierFlags;
+@property(readonly) NSUInteger modifierFlags;
 @property(readonly) NSTimeInterval timestamp;
 
 @end
diff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm
index 93d929c4f2bd147cc3937c7b8f40fd02521ac4b2..cc9bedd66927dc6ef829def316cb4a6450ed7a79 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -138,6 +138,11 @@ RenderWidgetHostView* GetRenderWidgetHostViewToUse(
 
 }  // namespace
 
+@interface NSWindow (AtomCustomMethods)
+- (BOOL)acceptsFirstMouse;
+- (BOOL)disableAutoHideCursor;
+@end
+
 // These are not documented, so use only after checking -respondsToSelector:.
 @interface NSApplication (UndocumentedSpeechMethods)
 - (void)speakString:(NSString*)string;
@@ -464,7 +469,7 @@ RenderWidgetHostViewMac::RenderWidgetHostViewMac(RenderWidgetHost* widget,
   background_layer_.reset([[CALayer alloc] init]);
   // Set the default color to be white. This is the wrong thing to do, but many
   // UI components expect this view to be opaque.
-  [background_layer_ setBackgroundColor:CGColorGetConstantColor(kCGColorWhite)];
+  // [background_layer_ setBackgroundColor:CGColorGetConstantColor(kCGColorWhite)];
   [cocoa_view_ setLayer:background_layer_];
   [cocoa_view_ setWantsLayer:YES];
 
@@ -1841,7 +1846,10 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 }
 
 - (BOOL)acceptsFirstMouse:(NSEvent*)theEvent {
-  return [self acceptsMouseEventsWhenInactive];
+  if ([self.window respondsToSelector:@selector(acceptsFirstMouse)] &&
+      [self.window acceptsFirstMouse])
+    return YES;
+  return NO;
 }
 
 - (void)setCloseOnDeactivate:(BOOL)b {
@@ -1988,13 +1996,13 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   // we need to return |YES| for all events that might be swallowed by the menu.
   // We do not return |YES| for every keypress because we don't get |keyDown:|
   // events for keys that we handle this way.
-  NSUInteger modifierFlags = [theEvent modifierFlags];
-  if ((modifierFlags & NSCommandKeyMask) == 0) {
-    // Make sure the menu does not contain key equivalents that don't
-    // contain cmd.
-    DCHECK(![[NSApp mainMenu] performKeyEquivalent:theEvent]);
-    return NO;
-  }
+  // NSUInteger modifierFlags = [theEvent modifierFlags];
+  // if ((modifierFlags & NSCommandKeyMask) == 0) {
+  //   // Make sure the menu does not contain key equivalents that don't
+  //   // contain cmd.
+  //   DCHECK(![[NSApp mainMenu] performKeyEquivalent:theEvent]);
+  //   return NO;
+  // }
 
   // Command key combinations are sent via performKeyEquivalent rather than
   // keyDown:. We just forward this on and if WebCore doesn't want to handle
@@ -2042,8 +2050,9 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   if (EventIsReservedBySystem(theEvent))
     return;
 
-  DCHECK([theEvent type] != NSKeyDown ||
-         !equiv == !([theEvent modifierFlags] & NSCommandKeyMask));
+  // TODO(bridiver) undo this and the electron patch
+  // DCHECK([theEvent type] != NSKeyDown ||
+  //        !equiv == !([theEvent modifierFlags] & NSCommandKeyMask));
 
   if ([theEvent type] == NSFlagsChanged) {
     // Ignore NSFlagsChanged events from the NumLock and Fn keys as
@@ -2404,14 +2413,14 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   // do so. For this reason, for now, we accept this non-ideal way of fixing the
   // point offset manually from the view bounds. This should be revisited when
   // fixing issues in TextInputClientMac (https://crbug.com/643233).
-  gfx::Rect root_box = renderWidgetHostView_->GetViewBounds();
-  gfx::Rect view_box = widgetHost->GetView()->GetViewBounds();
+  // gfx::Rect root_box = renderWidgetHostView_->GetViewBounds();
+  // gfx::Rect view_box = widgetHost->GetView()->GetViewBounds();
 
   TextInputClientMac::GetInstance()->GetStringFromRange(
       widgetHost, range, ^(NSAttributedString* string, NSPoint baselinePoint) {
-        baselinePoint.x += view_box.origin().x() - root_box.origin().x();
-        baselinePoint.y +=
-            root_box.bottom_left().y() - view_box.bottom_left().y();
+        // baselinePoint.x += view_box.origin().x() - root_box.origin().x();
+        // baselinePoint.y +=
+        //     root_box.bottom_left().y() - view_box.bottom_left().y();
         [self showLookUpDictionaryOverlayInternal:string
                                     baselinePoint:baselinePoint
                                        targetView:targetView];
@@ -2790,6 +2799,10 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 // move) for the given event. Customize here to be more selective about which
 // key presses to autohide on.
 + (BOOL)shouldAutohideCursorForEvent:(NSEvent*)event {
+  if ([event.window respondsToSelector:@selector(disableAutoHideCursor)] &&
+      [event.window disableAutoHideCursor])
+    return NO;
+
   return ([event type] == NSKeyDown &&
              !([event modifierFlags] & NSCommandKeyMask)) ? YES : NO;
 }
@@ -2946,9 +2959,11 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 // Since this implementation doesn't have to wait any IPC calls, this doesn't
 // make any key-typing jank. --hbono 7/23/09
 //
+#ifndef MAS_BUILD
 extern "C" {
 extern NSString *NSTextInputReplacementRangeAttributeName;
 }
+#endif
 
 - (NSArray *)validAttributesForMarkedText {
   // This code is just copied from WebKit except renaming variables.
diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index 574053731784ad9ff8fe33c4698fa58c0368b09e..7b5dd2d431e26584a3c7bd2a4ac4d0fa5dfbb10a 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -1542,7 +1542,7 @@ void WebContentsImpl::Init(const WebContents::CreateParams& params) {
   // This is set before initializing the render manager since
   // RenderFrameHostManager::Init calls back into us via its delegate to ask if
   // it should be hidden.
-  should_normally_be_visible_ = !params.initially_hidden;
+  should_normally_be_visible_ = true; // !params.initially_hidden;
 
   // The routing ids must either all be set or all be unset.
   DCHECK((params.routing_id == MSG_ROUTING_NONE &&
@@ -2035,7 +2035,7 @@ void WebContentsImpl::CreateNewWindow(
   DCHECK(!params.opener_suppressed || route_id == MSG_ROUTING_NONE);
 
   scoped_refptr<SiteInstance> site_instance =
-      params.opener_suppressed && !is_guest
+      params.opener_suppressed // && !is_guest
           ? SiteInstance::CreateForURL(GetBrowserContext(), params.target_url)
           : source_site_instance;
 
diff --git a/content/child/child_process.cc b/content/child/child_process.cc
index 2763ee03cffdb0b12d5934091b9c31f7bad6ff39..ffc179200c288e4e3b5292a79bce9e909f36e7c5 100644
--- a/content/child/child_process.cc
+++ b/content/child/child_process.cc
@@ -123,7 +123,7 @@ void ChildProcess::WaitForDebugger(const std::string& label) {
 #if defined(GOOGLE_CHROME_BUILD)
   std::string title = "Google Chrome";
 #else  // CHROMIUM_BUILD
-  std::string title = "Chromium";
+  std::string title = "Brave";
 #endif  // CHROMIUM_BUILD
   title += " ";
   title += label;  // makes attaching to process easier
diff --git a/content/common/dom_storage/dom_storage_map.cc b/content/common/dom_storage/dom_storage_map.cc
index 71368bdd55039ddc76278e7b5706e30517ab8aae..047054f366cafbd723affd26680310b087f4436f 100644
--- a/content/common/dom_storage/dom_storage_map.cc
+++ b/content/common/dom_storage/dom_storage_map.cc
@@ -64,10 +64,12 @@ bool DOMStorageMap::SetItem(
   size_t new_item_size = size_of_item(key, value);
   size_t new_bytes_used = bytes_used_ - old_item_size + new_item_size;
 
+#if 0
   // Only check quota if the size is increasing, this allows
   // shrinking changes to pre-existing files that are over budget.
   if (new_item_size > old_item_size && new_bytes_used > quota_)
     return false;
+#endif
 
   values_[key] = base::NullableString16(value, false);
   ResetKeyIterator();
diff --git a/content/public/app/mojo/content_renderer_manifest.json b/content/public/app/mojo/content_renderer_manifest.json
index 836380143bdeb2737bf6fd8b2d5f57ea49125206..48a42d105549e98fea409c9ab113d4bff74a2e4a 100644
--- a/content/public/app/mojo/content_renderer_manifest.json
+++ b/content/public/app/mojo/content_renderer_manifest.json
@@ -25,6 +25,7 @@
     "navigation:frame": {
       "provides": {
         "browser": [
+          "autofill::mojom::AutofillAgent",
           "blink::mojom::AppBannerController",
           "content::mojom::ImageDownloader",
           "mojom::MediaDevicesListener"
diff --git a/content/public/browser/resource_request_details.cc b/content/public/browser/resource_request_details.cc
index 0e790b688417f077815ab588406bd67738cdb4a3..0b5140a416ff1017c96c44ff223ea61871d7b4b9 100644
--- a/content/public/browser/resource_request_details.cc
+++ b/content/public/browser/resource_request_details.cc
@@ -22,6 +22,10 @@ ResourceRequestDetails::ResourceRequestDetails(const net::URLRequest* request,
       has_certificate(has_certificate),
       ssl_cert_status(request->ssl_info().cert_status),
       socket_address(request->GetSocketAddress()) {
+  if (request->response_info().headers.get())
+    headers = new net::HttpResponseHeaders(
+        request->response_info().headers->raw_headers());
+
   const ResourceRequestInfo* info = ResourceRequestInfo::ForRequest(request);
   resource_type = info->GetResourceType();
   http_response_code =
diff --git a/content/public/browser/resource_request_details.h b/content/public/browser/resource_request_details.h
index e54e2c0fcc8eac6fe637025c3c71f3d6834a4892..d817176d073d8a96fa76b944f6fb198d425b2490 100644
--- a/content/public/browser/resource_request_details.h
+++ b/content/public/browser/resource_request_details.h
@@ -10,6 +10,7 @@
 #include "content/public/common/resource_type.h"
 #include "net/base/host_port_pair.h"
 #include "net/cert/cert_status_flags.h"
+#include "net/http/http_response_headers.h"
 #include "net/url_request/url_request_status.h"
 #include "url/gurl.h"
 
@@ -41,6 +42,7 @@ struct ResourceRequestDetails {
   // HTTP response code. See HttpResponseHeaders::response_code().
   // -1 if there are no response headers yet.
   int http_response_code;
+  scoped_refptr<net::HttpResponseHeaders> headers;
 };
 
 // Details about a redirection of a resource request.
diff --git a/content/renderer/browser_plugin/browser_plugin.cc b/content/renderer/browser_plugin/browser_plugin.cc
index 248b36b1b203f00cdf854ae0652388790a3a634f..6cc4430de5e8dfea922f54f5fa3c640f9c5239de 100644
--- a/content/renderer/browser_plugin/browser_plugin.cc
+++ b/content/renderer/browser_plugin/browser_plugin.cc
@@ -454,8 +454,8 @@ blink::WebInputEventResult BrowserPlugin::handleInputEvent(
 
   if (blink::WebInputEvent::isGestureEventType(event.type)) {
     auto gesture_event = static_cast<const blink::WebGestureEvent&>(event);
-    DCHECK(blink::WebInputEvent::GestureTapDown == event.type ||
-           gesture_event.resendingPluginId == browser_plugin_instance_id_);
+    // DCHECK(blink::WebInputEvent::GestureTapDown == event.type ||
+    //        gesture_event.resendingPluginId == browser_plugin_instance_id_);
 
     // We shouldn't be forwarding GestureEvents to the Guest anymore. Indicate
     // we handled this only if it's a non-resent event.
diff --git a/content/renderer/render_thread_impl.cc b/content/renderer/render_thread_impl.cc
index d569350255fc98759f0de7ce89f7cd3374f98c42..622e91da371b5ca367dbe78c3c64f6b9b2dcbf52 100644
--- a/content/renderer/render_thread_impl.cc
+++ b/content/renderer/render_thread_impl.cc
@@ -772,12 +772,13 @@ void RenderThreadImpl::Init(
       switches::kEnableGpuMemoryBufferCompositorResources);
 
 #if defined(OS_MACOSX)
-  base::ScopedCFTypeRef<CFStringRef> key(
-      base::SysUTF8ToCFStringRef("NSScrollViewRubberbanding"));
-  Boolean key_exists = false;
-  Boolean value = CFPreferencesGetAppBooleanValue(
-      key, kCFPreferencesCurrentApplication, &key_exists);
-  is_elastic_overscroll_enabled_ = !key_exists || value;
+  // base::ScopedCFTypeRef<CFStringRef> key(
+  //     base::SysUTF8ToCFStringRef("NSScrollViewRubberbanding"));
+  // Boolean key_exists = false;
+  // Boolean value = CFPreferencesGetAppBooleanValue(
+  //     key, kCFPreferencesCurrentApplication, &key_exists);
+  // is_elastic_overscroll_enabled_ = !key_exists || value;
+  is_elastic_overscroll_enabled_ = true;
 #else
   is_elastic_overscroll_enabled_ = false;
 #endif
diff --git a/extensions/common/api/_api_features.json b/extensions/common/api/_api_features.json
index 5380a15a5e340fb2e79b95d93053db5e51838c87..f00abaacd6edd4b30bef27fe3cea70793e10e244 100644
--- a/extensions/common/api/_api_features.json
+++ b/extensions/common/api/_api_features.json
@@ -171,7 +171,10 @@
     {
       "internal": true,
       "channel": "stable",
-      "contexts": ["blessed_extension"]
+      "contexts": ["blessed_extension", "webui"],
+      "matches": [
+        "chrome://brave/*"
+      ]
     }, {
       "internal": true,
       "channel": "trunk",
@@ -493,6 +496,7 @@
     "internal": true,
     "contexts": ["webui"],
     "matches": [
+      "chrome://brave/*",
       "chrome://chrome-signin/*",
       "chrome://media-router/*",
       "chrome://oobe/*"
@@ -511,6 +515,13 @@
       "chrome://media-router/*",
       "chrome://oobe/*"
     ]
+  }, {
+    "internal": true,
+    "channel": "stable",
+    "contexts": ["webui"],
+    "matches": [
+      "chrome://brave/*"
+    ]
   }],
   "webViewRequest": [{
     "dependencies": ["permission:webview"],
@@ -519,6 +530,7 @@
     "channel": "stable",
     "contexts": ["webui"],
     "matches": [
+      "chrome://brave/*",
       "chrome://chrome-signin/*",
       "chrome://media-router/*",
       "chrome://oobe/*"
diff --git a/extensions/renderer/resources/guest_view/guest_view_container.js b/extensions/renderer/resources/guest_view/guest_view_container.js
index 8cfc8cb441afa19109e320c0a6405f79e9878a85..606282f28dfea8b9104c3f9d0bbd4c859baaed46 100644
--- a/extensions/renderer/resources/guest_view/guest_view_container.js
+++ b/extensions/renderer/resources/guest_view/guest_view_container.js
@@ -26,6 +26,7 @@ function GuestViewContainer(element, viewType) {
   privates(this).internalElement = this.createInternalElement$();
   this.setupFocusPropagation();
   var shadowRoot = this.element.createShadowRoot();
+  shadowRoot.innerHTML = '<style>:host { display: flex; }</style>'
   shadowRoot.appendChild(privates(this).internalElement);
 
   GuestViewInternalNatives.RegisterView(this.viewInstanceId, this, viewType);
@@ -203,8 +204,7 @@ function registerInternalElement(viewType) {
   proto.createdCallback = function() {
     this.setAttribute('type', 'application/browser-plugin');
     this.setAttribute('id', 'browser-plugin-' + IdGenerator.GetNextId());
-    this.style.width = '100%';
-    this.style.height = '100%';
+    this.style.flex = '1 1 auto'
   };
 
   proto.attachedCallback = function() {
diff --git a/gin/object_template_builder.h b/gin/object_template_builder.h
index bf0ece1e723ba1a0644961cfd3a01ce3c14c892a..5e7d3dbb9da51a5abb0447bc04c90c9bee6b9324 100644
--- a/gin/object_template_builder.h
+++ b/gin/object_template_builder.h
@@ -26,7 +26,7 @@ template<typename T, typename Enable = void>
 struct CallbackTraits {
   static v8::Local<v8::FunctionTemplate> CreateTemplate(v8::Isolate* isolate,
                                                          T callback) {
-    return CreateFunctionTemplate(isolate, base::Bind(callback));
+    return gin::CreateFunctionTemplate(isolate, base::Bind(callback));
   }
   static void SetAsFunctionHandler(v8::Isolate* isolate,
                                    v8::Local<v8::ObjectTemplate> tmpl,
@@ -40,7 +40,7 @@ template<typename T>
 struct CallbackTraits<base::Callback<T> > {
   static v8::Local<v8::FunctionTemplate> CreateTemplate(
       v8::Isolate* isolate, const base::Callback<T>& callback) {
-    return CreateFunctionTemplate(isolate, callback);
+    return gin::CreateFunctionTemplate(isolate, callback);
   }
   static void SetAsFunctionHandler(v8::Isolate* isolate,
                                    v8::Local<v8::ObjectTemplate> tmpl,
@@ -59,7 +59,7 @@ struct CallbackTraits<
     typename std::enable_if<std::is_member_function_pointer<T>::value>::type> {
   static v8::Local<v8::FunctionTemplate> CreateTemplate(v8::Isolate* isolate,
                                                          T callback) {
-    return CreateFunctionTemplate(isolate, base::Bind(callback),
+    return gin::CreateFunctionTemplate(isolate, base::Bind(callback),
                                   HolderIsFirstArgument);
   }
   static void SetAsFunctionHandler(v8::Isolate* isolate,
diff --git a/net/http/http_util.cc b/net/http/http_util.cc
index 99b7192c838d500ce2bec2b783834f0bb94dfd22..ad92a5fbd7967af840fac0e2b6c65bf615b273be 100644
--- a/net/http/http_util.cc
+++ b/net/http/http_util.cc
@@ -57,8 +57,8 @@ static size_t FindStringEnd(const std::string& line, size_t start, char delim) {
 // static
 std::string HttpUtil::SpecForRequest(const GURL& url) {
   // We may get ftp scheme when fetching ftp resources through proxy.
-  DCHECK(url.is_valid() && (url.SchemeIsHTTPOrHTTPS() || url.SchemeIs("ftp") ||
-                            url.SchemeIsWSOrWSS()));
+  // DCHECK(url.is_valid() && (url.SchemeIsHTTPOrHTTPS() || url.SchemeIs("ftp") ||
+  //                           url.SchemeIsWSOrWSS()));
   return SimplifyUrlForRequest(url).spec();
 }
 
diff --git a/net/url_request/url_request_job.h b/net/url_request/url_request_job.h
index 288644e8124c681e090838d7741644cb4530d785..10486ccde10c71befd53ab64cab65b0cb5515fdb 100644
--- a/net/url_request/url_request_job.h
+++ b/net/url_request/url_request_job.h
@@ -270,6 +270,7 @@ class NET_EXPORT URLRequestJob : public base::PowerObserver {
   void OnCallToDelegate();
   void OnCallToDelegateComplete();
 
+ public:
   // Called to read raw (pre-filtered) data from this Job. Reads at most
   // |buf_size| bytes into |buf|.
   // Possible return values:
diff --git a/services/service_manager/public/cpp/BUILD.gn b/services/service_manager/public/cpp/BUILD.gn
index a73de276d9a3ceaf24c889e966dab08bb18616cb..6fde96fa8808fd9e0612d94f3176bc7eed6c4383 100644
--- a/services/service_manager/public/cpp/BUILD.gn
+++ b/services/service_manager/public/cpp/BUILD.gn
@@ -2,6 +2,8 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//electron/build/muon.gni")
+
 group("cpp") {
   public_deps = [
     ":sources",
@@ -67,6 +69,12 @@ if (!is_ios) {
       "//base:i18n",
       "//mojo/public/c/system",
     ]
+
+    if (muon_build) {
+      deps -= [ "//base:i18n" ]
+      deps += [ "//base:i18n_without_icu" ]
+      configs += [ "//third_party/icu:icu_config" ]
+    }
   }
 
   static_library("service_test_support") {
diff --git a/services/service_manager/standalone/BUILD.gn b/services/service_manager/standalone/BUILD.gn
index f7633aff887bc97302ade985d9709768d1e536cf..4c9a31711c0be7cf97c77cc9a80c30e611063682 100644
--- a/services/service_manager/standalone/BUILD.gn
+++ b/services/service_manager/standalone/BUILD.gn
@@ -6,6 +6,7 @@ import("//services/service_manager/public/cpp/service.gni")
 import("//mojo/public/tools/bindings/mojom.gni")
 import("//testing/test.gni")
 
+# workaround for icu linking errors on windows
 executable("standalone") {
   output_name = "mojo_runner"
   sources = [
@@ -17,6 +18,10 @@ executable("standalone") {
     "//build/config/sanitizers:deps",
     "//build/win:default_exe_manifest",
   ]
+
+  if (muon_build) {
+    deps += [ "//third_party/icu:icu_chrome" ]
+  }
 }
 
 source_set("lib") {
diff --git a/services/tracing/BUILD.gn b/services/tracing/BUILD.gn
index cb51c8728c90f4c67292578c956abbd5a7d67036..b456243c66cb36cf92af22f06eaed3e9f098ee3e 100644
--- a/services/tracing/BUILD.gn
+++ b/services/tracing/BUILD.gn
@@ -5,6 +5,9 @@
 import("//services/service_manager/public/cpp/service.gni")
 import("//services/service_manager/public/service_manifest.gni")
 
+# workaround for icu linking errors on windows
+# TODO(bridiver) - get this to work with icu_chrome
+if (muon_build) { group("tracing") {} } else {
 service("tracing") {
   sources = [
     "main.cc",
@@ -45,3 +48,4 @@ source_set("lib") {
     "//services/tracing/public/interfaces",
   ]
 }
+}
diff --git a/testing/libfuzzer/fuzzers/BUILD.gn b/testing/libfuzzer/fuzzers/BUILD.gn
index 24973b69dda663f4905f585ccc8f43dd2a087171..5990c5228b7a46f0dc2024ea0e7ccdab54b861de 100644
--- a/testing/libfuzzer/fuzzers/BUILD.gn
+++ b/testing/libfuzzer/fuzzers/BUILD.gn
@@ -205,6 +205,7 @@ fuzzer_test("libpng_read_fuzzer") {
   dict = "dicts/png.dict"
 }
 
+if (!muon_build) {
 fuzzer_test("v8_script_parser_fuzzer") {
   sources = []
   deps = [
@@ -322,6 +323,7 @@ fuzzer_test("v8_wasm_types_section_fuzzer") {
   ]
   libfuzzer_options = [ "max_len=500" ]
 }
+}
 
 fuzzer_test("third_party_re2_fuzzer") {
   sources = [
diff --git a/third_party/WebKit/Source/core/dom/DOMArrayBuffer.h b/third_party/WebKit/Source/core/dom/DOMArrayBuffer.h
index 6bfee912323849e8a0ef3aac93819a8100dceaae..8593ca020a20b1043b23d7e0e607356212d69aa3 100644
--- a/third_party/WebKit/Source/core/dom/DOMArrayBuffer.h
+++ b/third_party/WebKit/Source/core/dom/DOMArrayBuffer.h
@@ -28,6 +28,10 @@ class CORE_EXPORT DOMArrayBuffer final : public DOMArrayBufferBase {
   static DOMArrayBuffer* create(WTF::ArrayBufferContents& contents) {
     return create(WTF::ArrayBuffer::create(contents));
   }
+  static DOMArrayBuffer* createExternal(void* source, unsigned byteLength)
+  {
+    return new DOMArrayBuffer(source, byteLength);
+  }
 
   // Only for use by XMLHttpRequest::responseArrayBuffer and
   // Internals::serializeObject.
@@ -50,6 +54,8 @@ class CORE_EXPORT DOMArrayBuffer final : public DOMArrayBufferBase {
  private:
   explicit DOMArrayBuffer(PassRefPtr<WTF::ArrayBuffer> buffer)
       : DOMArrayBufferBase(std::move(buffer)) {}
+  DOMArrayBuffer(void* source, unsigned byteLength)
+      : DOMArrayBufferBase(source, byteLength) {}
 };
 
 }  // namespace blink
diff --git a/third_party/WebKit/Source/core/dom/DOMArrayBufferBase.h b/third_party/WebKit/Source/core/dom/DOMArrayBufferBase.h
index 74738dade2b75b3659e21f2cf97f4a3cfd0d477e..115e410ea378654673dd8295b23d14ec68f8f825 100644
--- a/third_party/WebKit/Source/core/dom/DOMArrayBufferBase.h
+++ b/third_party/WebKit/Source/core/dom/DOMArrayBufferBase.h
@@ -21,9 +21,24 @@ class CORE_EXPORT DOMArrayBufferBase
   const WTF::ArrayBuffer* buffer() const { return m_buffer.get(); }
   WTF::ArrayBuffer* buffer() { return m_buffer.get(); }
 
-  const void* data() const { return buffer()->data(); }
-  void* data() { return buffer()->data(); }
-  unsigned byteLength() const { return buffer()->byteLength(); }
+  const void* data() const {
+    if (m_isExternal)
+      return m_source;
+    else
+      return buffer()->data();
+  }
+  void* data() {
+    if (m_isExternal)
+      return m_source;
+    else
+      return buffer()->data();
+  }
+  unsigned byteLength() const {
+      if (m_isExternal)
+          return m_byteLength;
+      else
+          return buffer()->byteLength();
+  }
   bool transfer(WTF::ArrayBufferContents& result) {
     return buffer()->transfer(result);
   }
@@ -43,11 +58,26 @@ class CORE_EXPORT DOMArrayBufferBase
 
  protected:
   explicit DOMArrayBufferBase(PassRefPtr<WTF::ArrayBuffer> buffer)
-      : m_buffer(buffer) {
+      : m_buffer(buffer),
+        m_isExternal(false),
+        m_source(nullptr),
+        m_byteLength(0)
+  {
     DCHECK(m_buffer);
   }
 
+  DOMArrayBufferBase(void* source, unsigned byteLength)
+      : m_buffer(WTF::ArrayBuffer::create(source, byteLength)),
+        m_isExternal(true),
+        m_source(source),
+        m_byteLength(byteLength)
+  {
+  }
+
   RefPtr<WTF::ArrayBuffer> m_buffer;
+  bool m_isExternal;
+  void* m_source;
+  unsigned m_byteLength;
 };
 
 }  // namespace blink
diff --git a/third_party/WebKit/Source/core/editing/EditingBehavior.h b/third_party/WebKit/Source/core/editing/EditingBehavior.h
index 3f098ef2b9b425d2964ab563ce1bbfc56ad2fd22..01f1ad4e97783ce1c835a665cbe5b7b2279af8c8 100644
--- a/third_party/WebKit/Source/core/editing/EditingBehavior.h
+++ b/third_party/WebKit/Source/core/editing/EditingBehavior.h
@@ -85,7 +85,7 @@ class CORE_EXPORT EditingBehavior {
   // On Mac and Windows, pressing backspace (when it isn't handled otherwise)
   // should navigate back.
   bool shouldNavigateBackOnBackspace() const {
-    return m_type != EditingUnixBehavior && m_type != EditingAndroidBehavior;
+    return false;
   }
 
   // On Mac, selecting backwards by word/line from the middle of a word/line,
diff --git a/third_party/WebKit/Source/core/fileapi/File.idl b/third_party/WebKit/Source/core/fileapi/File.idl
index 82775974231274e6639751139f5c7bc9bbfaad25..8aca09939d20cc48cfa85c507fdea17ccfdbe5fb 100644
--- a/third_party/WebKit/Source/core/fileapi/File.idl
+++ b/third_party/WebKit/Source/core/fileapi/File.idl
@@ -34,6 +34,7 @@
     Exposed=(Window,Worker),
 ] interface File : Blob {
     readonly attribute DOMString name;
+    readonly attribute DOMString path;
     readonly attribute long long lastModified;
 
     // Non-standard APIs
diff --git a/third_party/WebKit/Source/platform/BUILD.gn b/third_party/WebKit/Source/platform/BUILD.gn
index 453c14ff4f66ebad72718005cd5929b79b491ba4..3e38726b1e724b11e88b97d4297123546eba10bd 100644
--- a/third_party/WebKit/Source/platform/BUILD.gn
+++ b/third_party/WebKit/Source/platform/BUILD.gn
@@ -183,6 +183,11 @@ executable("character_data_generator") {
     "//build/win:default_exe_manifest",
     "//third_party/icu",
   ]
+
+  if (muon_build) {
+    deps -= [ "//third_party/icu" ]
+    deps += [ "//third_party/icu:icu_chrome" ]
+  }
 }
 
 # This isn't strictly necessary since we can just add the deps to "platform",
diff --git a/third_party/WebKit/Source/web/WebArrayBuffer.cpp b/third_party/WebKit/Source/web/WebArrayBuffer.cpp
index 271ec5391d8a9a478f36da58f1b539963cf39724..cd0fcf8bec875485097560c9c8231ad013cc0a96 100644
--- a/third_party/WebKit/Source/web/WebArrayBuffer.cpp
+++ b/third_party/WebKit/Source/web/WebArrayBuffer.cpp
@@ -39,6 +39,11 @@ WebArrayBuffer WebArrayBuffer::create(unsigned numElements,
   return WebArrayBuffer(DOMArrayBuffer::create(numElements, elementByteSize));
 }
 
+WebArrayBuffer WebArrayBuffer::createExternal(void* source, unsigned byteLength)
+{
+  return WebArrayBuffer(DOMArrayBuffer::createExternal(source, byteLength));
+}
+
 void WebArrayBuffer::reset() {
   m_private.reset();
 }
diff --git a/third_party/WebKit/public/web/WebArrayBuffer.h b/third_party/WebKit/public/web/WebArrayBuffer.h
index 6acdddff8c59f63214fb6267a562f6ac8a2b5296..7a1097d9538981c6b8f8928796dba0b1a91c7c52 100644
--- a/third_party/WebKit/public/web/WebArrayBuffer.h
+++ b/third_party/WebKit/public/web/WebArrayBuffer.h
@@ -51,6 +51,8 @@ class WebArrayBuffer {
 
   BLINK_EXPORT static WebArrayBuffer create(unsigned numElements,
                                             unsigned elementByteSize);
+  BLINK_EXPORT static WebArrayBuffer createExternal(void* source,
+                                                    unsigned byteLength);
 
   BLINK_EXPORT void reset();
   BLINK_EXPORT void assign(const WebArrayBuffer&);
diff --git a/third_party/widevine/cdm/BUILD.gn b/third_party/widevine/cdm/BUILD.gn
index 8b40b1ab1e7ac238cb695cb177fae873e7cf9eb3..ceb0c28fb7ab60fce8ca95f36d3b025fe50d1850 100644
--- a/third_party/widevine/cdm/BUILD.gn
+++ b/third_party/widevine/cdm/BUILD.gn
@@ -108,9 +108,10 @@ if (widevine_cdm_binary_files != []) {
     if (is_mac) {
       ldflags = [
         # Not to strip important symbols by -Wl,-dead_strip.
-        "-Wl,-exported_symbol,_PPP_GetInterface",
-        "-Wl,-exported_symbol,_PPP_InitializeModule",
-        "-Wl,-exported_symbol,_PPP_ShutdownModule",
+        # "-Wl,-exported_symbol,_PPP_GetInterface",
+        # "-Wl,-exported_symbol,_PPP_InitializeModule",
+        # "-Wl,-exported_symbol,_PPP_ShutdownModule",
+        "-Wl,-install_name,@loader_path/libwidevinecdm.dylib",
       ]
       #TODO(jrummell) Mac: 'DYLIB_INSTALL_NAME_BASE': '@loader_path',
     } else if (is_posix && !is_mac) {
